var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/interfaces/Algorithm.html",[0,0.074,1,0.437]],["body/interfaces/Algorithm.html",[0,0.135,1,0.687,2,0.467,3,0.467,4,0.467,5,0.318,6,0.551,7,0.551,8,0.389,9,0.547,10,1.092,11,1.136,12,0.823,13,1.068,14,0.723,15,0.057,16,1.449,17,1.048,18,0.959,19,0.656,20,0.644,21,0.644,22,0.644,23,0.644,24,0.644,25,0.644,26,0.972,27,0.389,28,0.551,29,0.547,30,0.906,31,0.644,32,0.644,33,0.389,34,0.644,35,0.389,36,0.551,37,0.547,38,0.551,39,0.644,40,0.644,41,0.644,42,0.644,43,0.644,44,0.644,45,0.644,46,0.644,47,0.644,48,0.644,49,0.896,50,1.048,51,1.048,52,1.048,53,0.644,54,0.551,55,0.644,56,1.048,57,1.048,58,0.644,59,0.644,60,0.644,61,0.644,62,0.644,63,0.644,64,0.644,65,0.644,66,0.906,67,0.906,68,0.644,69,0.644,70,0.906,71,0.644,72,0.644,73,0.644,74,0.389,75,0.644,76,0.389,77,0.644,78,0.644,79,0.644,80,0.644,81,0.644,82,0.644,83,0.644,84,0.644,85,0.644,86,0.551,87,0.035,88,0.035]],["title/interfaces/AllAlgorithms.html",[0,0.074,35,0.437]],["body/interfaces/AllAlgorithms.html",[0,0.136,1,0.732,2,0.482,3,0.482,4,0.482,5,0.328,6,0.569,7,0.569,8,0.402,9,0.56,10,0.986,11,0.665,12,0.482,13,1.066,14,0.644,15,0.057,16,1.447,17,0.665,18,0.966,19,0.671,20,0.665,21,0.665,22,0.665,23,0.665,24,0.665,25,0.665,26,0.986,27,0.402,28,0.569,29,0.56,30,0.926,31,0.665,32,0.665,33,0.402,34,0.665,35,0.56,36,0.986,37,0.56,38,0.569,39,0.665,40,0.665,41,0.665,42,0.665,43,0.665,44,0.665,45,0.665,46,0.665,47,0.665,48,0.665,49,0.912,50,1.066,51,1.066,52,1.066,53,0.665,54,0.569,55,0.665,56,1.066,57,1.066,58,0.665,59,0.665,60,0.665,61,0.665,62,0.665,63,0.665,64,0.665,65,0.665,66,0.926,67,0.926,68,0.665,69,0.665,70,0.926,71,0.665,72,0.665,73,0.665,74,0.402,75,0.665,76,0.402,77,0.665,78,0.665,79,0.665,80,0.665,81,0.665,82,0.665,83,0.665,84,0.665,85,0.665,86,0.569,87,0.036,88,0.036]],["title/interfaces/AllModels.html",[0,0.074,74,0.437]],["body/interfaces/AllModels.html",[0,0.136,1,0.644,2,0.482,3,0.482,4,0.482,5,0.328,6,0.569,7,0.569,8,0.402,9,0.56,10,0.986,11,0.665,12,0.482,13,1.066,14,0.644,15,0.057,16,1.447,17,0.665,18,0.966,19,0.671,20,0.665,21,0.665,22,0.665,23,0.665,24,0.665,25,0.665,26,0.986,27,0.402,28,0.569,29,0.56,30,0.926,31,0.665,32,0.665,33,0.402,34,0.665,35,0.402,36,0.569,37,0.696,38,0.569,39,0.665,40,0.665,41,0.665,42,0.665,43,0.665,44,0.665,45,0.665,46,0.665,47,0.665,48,0.665,49,0.912,50,1.066,51,1.066,52,1.066,53,0.665,54,0.569,55,0.665,56,1.066,57,1.066,58,0.665,59,0.665,60,0.665,61,0.665,62,0.665,63,0.665,64,0.665,65,0.665,66,0.926,67,0.926,68,0.665,69,0.665,70,0.926,71,0.665,72,0.665,73,0.665,74,0.56,75,1.153,76,0.402,77,0.665,78,0.665,79,0.665,80,0.665,81,0.665,82,0.665,83,0.665,84,0.665,85,0.665,86,0.569,87,0.036,88,0.036]],["title/interfaces/AllPhysicalMeters.html",[0,0.074,27,0.437]],["body/interfaces/AllPhysicalMeters.html",[0,0.136,1,0.644,2,0.482,3,0.482,4,0.482,5,0.328,6,0.569,7,0.569,8,0.402,9,0.56,10,0.986,11,0.665,12,0.482,13,1.066,14,0.644,15,0.057,16,1.447,17,0.665,18,0.966,19,0.835,20,0.665,21,0.665,22,0.665,23,0.665,24,0.665,25,0.665,26,0.986,27,0.56,28,0.986,29,0.56,30,0.926,31,0.665,32,0.665,33,0.402,34,0.665,35,0.402,36,0.569,37,0.56,38,0.569,39,0.665,40,0.665,41,0.665,42,0.665,43,0.665,44,0.665,45,0.665,46,0.665,47,0.665,48,0.665,49,0.912,50,1.066,51,1.066,52,1.066,53,0.665,54,0.569,55,0.665,56,1.066,57,1.066,58,0.665,59,0.665,60,0.665,61,0.665,62,0.665,63,0.665,64,0.665,65,0.665,66,0.926,67,0.926,68,0.665,69,0.665,70,0.926,71,0.665,72,0.665,73,0.665,74,0.402,75,0.665,76,0.402,77,0.665,78,0.665,79,0.665,80,0.665,81,0.665,82,0.665,83,0.665,84,0.665,85,0.665,86,0.569,87,0.036,88,0.036]],["title/interfaces/AllVirtualMeters.html",[0,0.074,33,0.437]],["body/interfaces/AllVirtualMeters.html",[0,0.136,1,0.644,2,0.482,3,0.482,4,0.482,5,0.328,6,0.569,7,0.569,8,0.402,9,0.56,10,0.986,11,0.665,12,0.482,13,1.066,14,0.644,15,0.057,16,1.447,17,0.665,18,0.966,19,0.671,20,0.665,21,0.665,22,0.665,23,0.665,24,0.665,25,0.665,26,0.986,27,0.402,28,0.569,29,0.696,30,0.926,31,0.665,32,0.665,33,0.56,34,1.153,35,0.402,36,0.569,37,0.56,38,0.569,39,0.665,40,0.665,41,0.665,42,0.665,43,0.665,44,0.665,45,0.665,46,0.665,47,0.665,48,0.665,49,0.912,50,1.066,51,1.066,52,1.066,53,0.665,54,0.569,55,0.665,56,1.066,57,1.066,58,0.665,59,0.665,60,0.665,61,0.665,62,0.665,63,0.665,64,0.665,65,0.665,66,0.926,67,0.926,68,0.665,69,0.665,70,0.926,71,0.665,72,0.665,73,0.665,74,0.402,75,0.665,76,0.402,77,0.665,78,0.665,79,0.665,80,0.665,81,0.665,82,0.665,83,0.665,84,0.665,85,0.665,86,0.569,87,0.036,88,0.036]],["title/modules/BeWaterSmartModule.html",[89,1.764,90,1.502]],["body/modules/BeWaterSmartModule.html",[3,0.663,4,0.663,5,0.451,15,0.056,18,0.663,87,0.044,88,0.044,89,2.235,90,2.894,91,2.235,92,1.903,93,2.679,94,3.652,95,2.679,96,2.679,97,3.652,98,2.679,99,2.679,100,2.679,101,3.002,102,3.348,103,2.679,104,2.235,105,1.903,106,2.046,107,3.354,108,4.016,109,4.191,110,2.679,111,4.191,112,2.235,113,4.191,114,3.354,115,4.191,116,3.354,117,3.354,118,4.191,119,2.679,120,3.354,121,3.354,122,2.679]],["title/injectables/BeWaterSmartService.html",[123,1.502,124,1.764]],["body/injectables/BeWaterSmartService.html",[0,0.046,1,0.688,2,0.193,3,0.193,4,0.193,5,0.131,8,0.161,9,0.274,10,0.73,12,0.84,13,0.945,14,0.644,15,0.057,18,0.193,26,0.779,27,0.161,28,0.779,29,0.422,33,0.161,35,0.161,36,0.67,37,0.161,38,0.779,49,0.388,74,0.161,76,0.422,87,0.017,88,0.017,105,2.368,106,2.038,108,2.495,112,0.649,119,0.779,122,0.779,123,0.942,124,1.106,125,0.975,126,0.649,127,3.792,128,1.66,129,1.66,130,1.66,131,1.66,132,2.559,133,1.66,134,2.559,135,2.559,136,2.559,137,2.559,138,1.66,139,1.66,140,0.975,141,0.975,142,2.559,143,3.333,144,4.095,145,0.975,146,3.51,147,3.333,148,4.175,149,1.66,150,2.87,151,0.975,152,1.66,153,4.311,154,3.752,155,3.854,156,1.66,157,2.559,158,2.221,159,4.697,160,4.802,161,2.87,162,1.66,163,4.597,164,4.903,165,4.423,166,3.51,167,3.51,168,3.123,169,1.66,170,4.006,171,0.975,172,2.87,173,1.66,174,1.66,175,1.66,176,1.326,177,4.175,178,1.66,179,3.792,180,1.66,181,1.66,182,1.326,183,1.66,184,3.123,185,3.51,186,1.66,187,0.975,188,1.66,189,1.66,190,3.333,191,1.66,192,0.975,193,3.792,194,1.66,195,3.792,196,1.66,197,0.975,198,3.123,199,1.66,200,2.168,201,2.559,202,1.66,203,1.66,204,1.66,205,0.975,206,1.66,207,1.66,208,3.123,209,1.326,210,1.66,211,1.66,212,0.975,213,3.333,214,0.975,215,4.175,216,1.66,217,0.975,218,1.66,219,1.66,220,0.975,221,1.326,222,1.66,223,1.66,224,1.66,225,2.87,226,1.66,227,1.66,228,1.66,229,1.66,230,1.66,231,1.66,232,2.559,233,2.168,234,1.66,235,1.66,236,1.66,237,2.87,238,2.87,239,4.37,240,3.792,241,2.87,242,0.975,243,0.975,244,1.66,245,1.326,246,1.66,247,1.66,248,1.66,249,1.66,250,0.649,251,0.779,252,2.168,253,2.559,254,2.168,255,1.66,256,2.168,257,1.731,258,0.975,259,1.326,260,0.975,261,0.975,262,0.975,263,0.975,264,0.975,265,0.975,266,0.779,267,0.779,268,0.779,269,0.779,270,0.975,271,0.649,272,0.975,273,0.975,274,0.975,275,0.975,276,4.175,277,0.975,278,0.975,279,0.975,280,0.975,281,0.975,282,1.66,283,1.66,284,1.66,285,0.975,286,0.975,287,0.975,288,3.906,289,0.975,290,0.975,291,3.123,292,0.975,293,0.975,294,0.975,295,1.66,296,1.66,297,0.975,298,0.975,299,0.975]],["title/interfaces/ForeCast.html",[0,0.074,76,0.437]],["body/interfaces/ForeCast.html",[0,0.133,1,0.614,2,0.441,3,0.441,4,0.441,5,0.3,6,0.521,7,0.521,8,0.368,9,0.526,10,0.948,11,0.609,12,0.441,13,1.07,14,0.837,15,0.057,16,1.442,17,0.609,18,0.946,19,0.63,20,0.609,21,0.609,22,0.609,23,0.609,24,0.609,25,0.609,26,1.074,27,0.368,28,0.521,29,0.526,30,0.87,31,0.609,32,0.609,33,0.368,34,0.609,35,0.368,36,0.521,37,0.526,38,0.521,39,0.609,40,0.609,41,0.609,42,0.609,43,0.609,44,0.609,45,0.609,46,0.609,47,0.609,48,0.609,49,0.869,50,1.016,51,1.016,52,1.016,53,0.609,54,0.521,55,0.609,56,1.016,57,1.016,58,0.609,59,0.609,60,0.609,61,0.609,62,0.609,63,0.609,64,0.609,65,0.609,66,0.87,67,0.87,68,0.609,69,0.609,70,0.87,71,0.609,72,0.609,73,0.609,74,0.368,75,0.609,76,0.526,77,1.108,78,1.108,79,1.108,80,1.016,81,0.609,82,0.609,83,0.609,84,1.108,85,1.108,86,0.948,87,0.033,88,0.033,300,2.124]],["title/interfaces/MLModel.html",[0,0.074,37,0.437]],["body/interfaces/MLModel.html",[0,0.131,1,0.717,2,0.408,3,0.408,4,0.408,5,0.278,6,0.482,7,0.482,8,0.34,9,0.497,10,1.049,11,0.563,12,0.408,13,1.069,14,0.845,15,0.057,16,1.424,17,0.563,18,0.928,19,0.596,20,0.563,21,0.563,22,0.563,23,0.563,24,0.563,25,0.563,26,1.049,27,0.34,28,0.482,29,0.497,30,1.137,31,0.563,32,0.563,33,0.34,34,0.563,35,0.34,36,0.482,37,0.587,38,0.914,39,1.069,40,1.069,41,0.563,42,0.563,43,0.563,44,0.563,45,0.563,46,0.563,47,0.563,48,0.563,49,0.831,50,0.972,51,0.972,52,0.972,53,0.563,54,0.482,55,0.563,56,0.972,57,0.972,58,0.563,59,1.069,60,0.563,61,0.563,62,0.563,63,0.563,64,1.069,65,0.563,66,0.823,67,0.823,68,0.563,69,1.069,70,1.187,71,1.069,72,1.069,73,1.069,74,0.34,75,0.563,76,0.34,77,0.563,78,0.563,79,0.563,80,0.563,81,0.563,82,0.563,83,0.563,84,0.563,85,0.563,86,0.482,87,0.032,88,0.032,300,2.608]],["title/interfaces/PhysicalMeter.html",[0,0.074,19,0.524]],["body/interfaces/PhysicalMeter.html",[0,0.134,1,0.622,2,0.452,3,0.452,4,0.452,5,0.307,6,0.533,7,0.533,8,0.377,9,0.535,10,1.081,11,0.623,12,0.452,13,1.071,14,0.829,15,0.057,16,1.438,17,0.623,18,0.952,19,0.745,20,1.12,21,0.623,22,0.623,23,0.623,24,1.12,25,1.12,26,1.081,27,0.377,28,0.533,29,0.535,30,0.885,31,0.623,32,0.623,33,0.377,34,0.623,35,0.377,36,0.533,37,0.535,38,0.533,39,0.623,40,0.623,41,0.623,42,0.623,43,0.623,44,0.623,45,0.623,46,0.623,47,0.623,48,0.623,49,0.88,50,1.029,51,1.029,52,1.029,53,0.623,54,0.533,55,0.623,56,1.029,57,1.029,58,0.623,59,0.623,60,0.623,61,0.623,62,0.623,63,0.623,64,0.623,65,0.623,66,0.885,67,0.885,68,0.623,69,0.623,70,0.885,71,0.623,72,0.623,73,0.623,74,0.377,75,0.623,76,0.377,77,0.623,78,0.623,79,0.623,80,0.623,81,0.623,82,0.623,83,0.623,84,0.623,85,0.623,86,0.533,87,0.034,88,0.034,300,2.16]],["title/interfaces/VirtualMeter.html",[0,0.074,29,0.437]],["body/interfaces/VirtualMeter.html",[0,0.134,1,0.627,2,0.459,3,0.459,4,0.459,5,0.312,6,0.542,7,0.542,8,0.382,9,0.54,10,1.086,11,0.633,12,0.459,13,1.072,14,0.767,15,0.057,16,1.44,17,0.633,18,0.955,19,0.648,20,0.633,21,0.633,22,0.633,23,0.633,24,0.633,25,0.633,26,1.086,27,0.382,28,0.542,29,0.627,30,1.19,31,1.128,32,1.128,33,0.382,34,0.633,35,0.382,36,0.542,37,0.54,38,0.542,39,0.633,40,0.633,41,0.633,42,0.633,43,0.633,44,0.633,45,0.633,46,0.633,47,0.633,48,0.633,49,0.888,50,1.038,51,1.038,52,1.038,53,0.633,54,0.542,55,0.633,56,1.038,57,1.038,58,0.633,59,0.633,60,0.633,61,0.633,62,0.633,63,0.633,64,0.633,65,0.633,66,0.895,67,0.895,68,0.633,69,0.633,70,0.895,71,0.633,72,0.633,73,0.633,74,0.382,75,0.633,76,0.382,77,0.633,78,0.633,79,0.633,80,0.633,81,0.633,82,0.633,83,0.633,84,0.633,85,0.633,86,0.542,87,0.034,88,0.034]],["title/coverage.html",[301,2.869]],["body/coverage.html",[0,0.143,1,0.526,5,0.429,6,1.204,7,1.204,14,0.526,15,0.056,19,0.63,27,0.526,29,0.526,33,0.526,35,0.526,37,0.526,74,0.526,76,0.526,87,0.043,88,0.043,101,1.808,105,2.533,106,2.18,123,1.808,124,2.123,126,2.704,158,2.123,271,2.123,301,2.546,302,3.187,303,3.187,304,3.187,305,3.187,306,1.808,307,3.187,308,3.187,309,3.187,310,3.187,311,4.058,312,3.187,313,3.187,314,5.195,315,3.187,316,4.701,317,3.187,318,3.187,319,3.187,320,3.187,321,2.546,322,2.546,323,2.546,324,3.187,325,3.187,326,3.187]],["title/dependencies.html",[92,1.803,327,1.774]],["body/dependencies.html",[15,0.055,87,0.049,88,0.049,92,2.669,110,3.246,112,2.707,328,4.063,329,4.063,330,4.063,331,3.758]],["title/index.html",[8,0.366,332,2.221,333,2.221]],["body/index.html",[5,0.431,12,0.633,15,0.043,54,0.748,86,0.951,87,0.043,88,0.043,104,2.134,106,2.465,158,2.134,176,2.558,182,2.558,209,2.558,221,2.558,245,3.252,250,2.134,259,2.558,306,2.539,331,2.558,334,3.202,335,4.071,336,3.202,337,4.475,338,4.475,339,2.558,340,3.202,341,3.202,342,4.709,343,4.969,344,4.475,345,4.862,346,4.033,347,3.202,348,3.202,349,3.202,350,3.202,351,3.202,352,3.202,353,4.862,354,3.202,355,3.202,356,4.071,357,3.202,358,3.202,359,3.202,360,4.071,361,3.202,362,3.202,363,3.202,364,3.202,365,3.202,366,3.202,367,4.071,368,3.202,369,3.202,370,4.475,371,3.202,372,2.134,373,3.202,374,3.202]],["title/modules.html",[91,2.393]],["body/modules.html",[15,0.05,87,0.05,88,0.05,90,2.348,91,2.757,375,4.138,376,4.138,377,4.138,378,4.138]],["title/overview.html",[372,2.393]],["body/overview.html",[2,0.747,15,0.052,87,0.047,88,0.047,89,3.003,90,2.892,92,2.143,93,3.018,94,3.018,95,3.018,96,3.018,97,3.018,98,3.018,99,3.018,100,3.018,101,2.966,102,3.6,103,3.018,104,2.517,123,2.143,257,3.848,306,2.143,372,2.517,379,3.778]],["title/properties.html",[9,0.524,327,1.774]],["body/properties.html",[9,0.687,15,0.053,87,0.05,88,0.05,339,3.326,380,4.164]],["title/miscellaneous/variables.html",[381,1.774,382,2.539]],["body/miscellaneous/variables.html",[8,0.591,13,0.709,14,0.72,15,0.057,87,0.046,88,0.046,101,2.035,105,2.035,106,2.3,126,2.91,154,3.489,155,3.489,250,2.91,251,3.489,266,2.865,267,2.865,268,2.865,269,2.865,271,2.91,306,2.035,321,2.865,322,3.489,323,3.763,346,2.865,381,2.865,382,2.865,383,3.586,384,3.586,385,3.586,386,3.586,387,3.586,388,3.586,389,3.586,390,3.586]]],"invertedIndex":[["",{"_index":15,"title":{},"body":{"interfaces/Algorithm.html":{},"interfaces/AllAlgorithms.html":{},"interfaces/AllModels.html":{},"interfaces/AllPhysicalMeters.html":{},"interfaces/AllVirtualMeters.html":{},"modules/BeWaterSmartModule.html":{},"injectables/BeWaterSmartService.html":{},"interfaces/ForeCast.html":{},"interfaces/MLModel.html":{},"interfaces/PhysicalMeter.html":{},"interfaces/VirtualMeter.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":314,"title":{},"body":{"coverage.html":{}}}],["0.0.1",{"_index":380,"title":{},"body":{"properties.html":{}}}],["0/1",{"_index":324,"title":{},"body":{"coverage.html":{}}}],["0/14",{"_index":318,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":316,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":315,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":320,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":319,"title":{},"body":{"coverage.html":{}}}],["0/9",{"_index":317,"title":{},"body":{"coverage.html":{}}}],["1",{"_index":257,"title":{},"body":{"injectables/BeWaterSmartService.html":{},"overview.html":{}}}],["1/1",{"_index":313,"title":{},"body":{"coverage.html":{}}}],["100",{"_index":312,"title":{},"body":{"coverage.html":{}}}],["12/14",{"_index":310,"title":{},"body":{"coverage.html":{}}}],["16.1.0",{"_index":331,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["2.3.0",{"_index":329,"title":{},"body":{"dependencies.html":{}}}],["38/47",{"_index":308,"title":{},"body":{"coverage.html":{}}}],["80",{"_index":307,"title":{},"body":{"coverage.html":{}}}],["85",{"_index":309,"title":{},"body":{"coverage.html":{}}}],["9",{"_index":379,"title":{},"body":{"overview.html":{}}}],["actualtestconsumption",{"_index":41,"title":{},"body":{"interfaces/Algorithm.html":{},"interfaces/AllAlgorithms.html":{},"interfaces/AllModels.html":{},"interfaces/AllPhysicalMeters.html":{},"interfaces/AllVirtualMeters.html":{},"interfaces/ForeCast.html":{},"interfaces/MLModel.html":{},"interfaces/PhysicalMeter.html":{},"interfaces/VirtualMeter.html":{}}}],["add",{"_index":350,"title":{},"body":{"index.html":{}}}],["added",{"_index":351,"title":{},"body":{"index.html":{}}}],["additional",{"_index":247,"title":{},"body":{"injectables/BeWaterSmartService.html":{}}}],["address",{"_index":20,"title":{},"body":{"interfaces/Algorithm.html":{},"interfaces/AllAlgorithms.html":{},"interfaces/AllModels.html":{},"interfaces/AllPhysicalMeters.html":{},"interfaces/AllVirtualMeters.html":{},"interfaces/ForeCast.html":{},"interfaces/MLModel.html":{},"interfaces/PhysicalMeter.html":{},"interfaces/VirtualMeter.html":{}}}],["addresscountry",{"_index":21,"title":{},"body":{"interfaces/Algorithm.html":{},"interfaces/AllAlgorithms.html":{},"interfaces/AllModels.html":{},"interfaces/AllPhysicalMeters.html":{},"interfaces/AllVirtualMeters.html":{},"interfaces/ForeCast.html":{},"interfaces/MLModel.html":{},"interfaces/PhysicalMeter.html":{},"interfaces/VirtualMeter.html":{}}}],["addresslocality",{"_index":22,"title":{},"body":{"interfaces/Algorithm.html":{},"interfaces/AllAlgorithms.html":{},"interfaces/AllModels.html":{},"interfaces/AllPhysicalMeters.html":{},"interfaces/AllVirtualMeters.html":{},"interfaces/ForeCast.html":{},"interfaces/MLModel.html":{},"interfaces/PhysicalMeter.html":{},"interfaces/VirtualMeter.html":{}}}],["addvirtualmeterwithid",{"_index":129,"title":{},"body":{"injectables/BeWaterSmartService.html":{}}}],["addvirtualmeterwithid(id",{"_index":149,"title":{},"body":{"injectables/BeWaterSmartService.html":{}}}],["afterwards",{"_index":235,"title":{},"body":{"injectables/BeWaterSmartService.html":{}}}],["alg",{"_index":170,"title":{},"body":{"injectables/BeWaterSmartService.html":{}}}],["algorithm",{"_index":1,"title":{"interfaces/Algorithm.html":{}},"body":{"interfaces/Algorithm.html":{},"interfaces/AllAlgorithms.html":{},"interfaces/AllModels.html":{},"interfaces/AllPhysicalMeters.html":{},"interfaces/AllVirtualMeters.html":{},"injectables/BeWaterSmartService.html":{},"interfaces/ForeCast.html":{},"interfaces/MLModel.html":{},"interfaces/PhysicalMeter.html":{},"interfaces/VirtualMeter.html":{},"coverage.html":{}}}],["algorithms",{"_index":36,"title":{},"body":{"interfaces/Algorithm.html":{},"interfaces/AllAlgorithms.html":{},"interfaces/AllModels.html":{},"interfaces/AllPhysicalMeters.html":{},"interfaces/AllVirtualMeters.html":{},"injectables/BeWaterSmartService.html":{},"interfaces/ForeCast.html":{},"interfaces/MLModel.html":{},"interfaces/PhysicalMeter.html":{},"interfaces/VirtualMeter.html":{}}}],["allalgorithms",{"_index":35,"title":{"interfaces/AllAlgorithms.html":{}},"body":{"interfaces/Algorithm.html":{},"interfaces/AllAlgorithms.html":{},"interfaces/AllModels.html":{},"interfaces/AllPhysicalMeters.html":{},"interfaces/AllVirtualMeters.html":{},"injectables/BeWaterSmartService.html":{},"interfaces/ForeCast.html":{},"interfaces/MLModel.html":{},"interfaces/PhysicalMeter.html":{},"interfaces/VirtualMeter.html":{},"coverage.html":{}}}],["allmodels",{"_index":74,"title":{"interfaces/AllModels.html":{}},"body":{"interfaces/Algorithm.html":{},"interfaces/AllAlgorithms.html":{},"interfaces/AllModels.html":{},"interfaces/AllPhysicalMeters.html":{},"interfaces/AllVirtualMeters.html":{},"injectables/BeWaterSmartService.html":{},"interfaces/ForeCast.html":{},"interfaces/MLModel.html":{},"interfaces/PhysicalMeter.html":{},"interfaces/VirtualMeter.html":{},"coverage.html":{}}}],["allphysicalmeters",{"_index":27,"title":{"interfaces/AllPhysicalMeters.html":{}},"body":{"interfaces/Algorithm.html":{},"interfaces/AllAlgorithms.html":{},"interfaces/AllModels.html":{},"interfaces/AllPhysicalMeters.html":{},"interfaces/AllVirtualMeters.html":{},"injectables/BeWaterSmartService.html":{},"interfaces/ForeCast.html":{},"interfaces/MLModel.html":{},"interfaces/PhysicalMeter.html":{},"interfaces/VirtualMeter.html":{},"coverage.html":{}}}],["allvirtualmeters",{"_index":33,"title":{"interfaces/AllVirtualMeters.html":{}},"body":{"interfaces/Algorithm.html":{},"interfaces/AllAlgorithms.html":{},"interfaces/AllModels.html":{},"interfaces/AllPhysicalMeters.html":{},"interfaces/AllVirtualMeters.html":{},"injectables/BeWaterSmartService.html":{},"interfaces/ForeCast.html":{},"interfaces/MLModel.html":{},"interfaces/PhysicalMeter.html":{},"interfaces/VirtualMeter.html":{},"coverage.html":{}}}],["angular",{"_index":337,"title":{},"body":{"index.html":{}}}],["angular.json",{"_index":352,"title":{},"body":{"index.html":{}}}],["angular/common",{"_index":110,"title":{},"body":{"modules/BeWaterSmartModule.html":{},"dependencies.html":{}}}],["angular/common/http",{"_index":260,"title":{},"body":{"injectables/BeWaterSmartService.html":{}}}],["angular/core",{"_index":112,"title":{},"body":{"modules/BeWaterSmartModule.html":{},"injectables/BeWaterSmartService.html":{},"dependencies.html":{}}}],["angular/forms",{"_index":114,"title":{},"body":{"modules/BeWaterSmartModule.html":{}}}],["angular/router",{"_index":261,"title":{},"body":{"injectables/BeWaterSmartService.html":{}}}],["api",{"_index":155,"title":{},"body":{"injectables/BeWaterSmartService.html":{},"miscellaneous/variables.html":{}}}],["api.ts",{"_index":322,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["api_prefix",{"_index":271,"title":{},"body":{"injectables/BeWaterSmartService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["artifacts",{"_index":354,"title":{},"body":{"index.html":{}}}],["bar",{"_index":224,"title":{},"body":{"injectables/BeWaterSmartService.html":{}}}],["being",{"_index":201,"title":{},"body":{"injectables/BeWaterSmartService.html":{}}}],["bewatersmart",{"_index":334,"title":{},"body":{"index.html":{}}}],["bewatersmartcomponent",{"_index":101,"title":{},"body":{"modules/BeWaterSmartModule.html":{},"coverage.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["bewatersmartmodule",{"_index":90,"title":{"modules/BeWaterSmartModule.html":{}},"body":{"modules/BeWaterSmartModule.html":{},"modules.html":{},"overview.html":{}}}],["bewatersmartservice",{"_index":124,"title":{"injectables/BeWaterSmartService.html":{}},"body":{"injectables/BeWaterSmartService.html":{},"coverage.html":{}}}],["body",{"_index":287,"title":{},"body":{"injectables/BeWaterSmartService.html":{}}}],["bonus",{"_index":248,"title":{},"body":{"injectables/BeWaterSmartService.html":{}}}],["boolean",{"_index":70,"title":{},"body":{"interfaces/Algorithm.html":{},"interfaces/AllAlgorithms.html":{},"interfaces/AllModels.html":{},"interfaces/AllPhysicalMeters.html":{},"interfaces/AllVirtualMeters.html":{},"interfaces/ForeCast.html":{},"interfaces/MLModel.html":{},"interfaces/PhysicalMeter.html":{},"interfaces/VirtualMeter.html":{}}}],["bootstrap",{"_index":95,"title":{},"body":{"modules/BeWaterSmartModule.html":{},"overview.html":{}}}],["browse",{"_index":378,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":375,"title":{},"body":{"modules.html":{}}}],["build",{"_index":353,"title":{},"body":{"index.html":{}}}],["building",{"_index":359,"title":{},"body":{"index.html":{}}}],["bws",{"_index":154,"title":{},"body":{"injectables/BeWaterSmartService.html":{},"miscellaneous/variables.html":{}}}],["cant",{"_index":175,"title":{},"body":{"injectables/BeWaterSmartService.html":{}}}],["category",{"_index":24,"title":{},"body":{"interfaces/Algorithm.html":{},"interfaces/AllAlgorithms.html":{},"interfaces/AllModels.html":{},"interfaces/AllPhysicalMeters.html":{},"interfaces/AllVirtualMeters.html":{},"interfaces/ForeCast.html":{},"interfaces/MLModel.html":{},"interfaces/PhysicalMeter.html":{},"interfaces/VirtualMeter.html":{}}}],["cd",{"_index":362,"title":{},"body":{"index.html":{}}}],["check",{"_index":54,"title":{},"body":{"interfaces/Algorithm.html":{},"interfaces/AllAlgorithms.html":{},"interfaces/AllModels.html":{},"interfaces/AllPhysicalMeters.html":{},"interfaces/AllVirtualMeters.html":{},"interfaces/ForeCast.html":{},"interfaces/MLModel.html":{},"interfaces/PhysicalMeter.html":{},"interfaces/VirtualMeter.html":{},"index.html":{}}}],["class",{"_index":122,"title":{},"body":{"modules/BeWaterSmartModule.html":{},"injectables/BeWaterSmartService.html":{}}}],["cli",{"_index":338,"title":{},"body":{"index.html":{}}}],["cluster_bewatersmartmodule",{"_index":98,"title":{},"body":{"modules/BeWaterSmartModule.html":{},"overview.html":{}}}],["cluster_bewatersmartmodule_declarations",{"_index":99,"title":{},"body":{"modules/BeWaterSmartModule.html":{},"overview.html":{}}}],["cluster_bewatersmartmodule_exports",{"_index":100,"title":{},"body":{"modules/BeWaterSmartModule.html":{},"overview.html":{}}}],["code",{"_index":340,"title":{},"body":{"index.html":{}}}],["combination",{"_index":231,"title":{},"body":{"injectables/BeWaterSmartService.html":{}}}],["command",{"_index":373,"title":{},"body":{"index.html":{}}}],["comment",{"_index":38,"title":{},"body":{"interfaces/Algorithm.html":{},"interfaces/AllAlgorithms.html":{},"interfaces/AllModels.html":{},"interfaces/AllPhysicalMeters.html":{},"interfaces/AllVirtualMeters.html":{},"injectables/BeWaterSmartService.html":{},"interfaces/ForeCast.html":{},"interfaces/MLModel.html":{},"interfaces/PhysicalMeter.html":{},"interfaces/VirtualMeter.html":{}}}],["common",{"_index":119,"title":{},"body":{"modules/BeWaterSmartModule.html":{},"injectables/BeWaterSmartService.html":{}}}],["commonmodule",{"_index":109,"title":{},"body":{"modules/BeWaterSmartModule.html":{}}}],["component",{"_index":306,"title":{},"body":{"coverage.html":{},"index.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["const",{"_index":270,"title":{},"body":{"injectables/BeWaterSmartService.html":{}}}],["constant",{"_index":266,"title":{},"body":{"injectables/BeWaterSmartService.html":{},"miscellaneous/variables.html":{}}}],["constructor",{"_index":140,"title":{},"body":{"injectables/BeWaterSmartService.html":{}}}],["constructor(http",{"_index":141,"title":{},"body":{"injectables/BeWaterSmartService.html":{}}}],["constructor(private",{"_index":274,"title":{},"body":{"injectables/BeWaterSmartService.html":{}}}],["contained",{"_index":162,"title":{},"body":{"injectables/BeWaterSmartService.html":{}}}],["containing",{"_index":165,"title":{},"body":{"injectables/BeWaterSmartService.html":{}}}],["context",{"_index":225,"title":{},"body":{"injectables/BeWaterSmartService.html":{}}}],["continue",{"_index":278,"title":{},"body":{"injectables/BeWaterSmartService.html":{}}}],["correct",{"_index":55,"title":{},"body":{"interfaces/Algorithm.html":{},"interfaces/AllAlgorithms.html":{},"interfaces/AllModels.html":{},"interfaces/AllPhysicalMeters.html":{},"interfaces/AllVirtualMeters.html":{},"interfaces/ForeCast.html":{},"interfaces/MLModel.html":{},"interfaces/PhysicalMeter.html":{},"interfaces/VirtualMeter.html":{}}}],["country_holidays",{"_index":60,"title":{},"body":{"interfaces/Algorithm.html":{},"interfaces/AllAlgorithms.html":{},"interfaces/AllModels.html":{},"interfaces/AllPhysicalMeters.html":{},"interfaces/AllVirtualMeters.html":{},"interfaces/ForeCast.html":{},"interfaces/MLModel.html":{},"interfaces/PhysicalMeter.html":{},"interfaces/VirtualMeter.html":{}}}],["covariatevalues",{"_index":77,"title":{},"body":{"interfaces/Algorithm.html":{},"interfaces/AllAlgorithms.html":{},"interfaces/AllModels.html":{},"interfaces/AllPhysicalMeters.html":{},"interfaces/AllVirtualMeters.html":{},"interfaces/ForeCast.html":{},"interfaces/MLModel.html":{},"interfaces/PhysicalMeter.html":{},"interfaces/VirtualMeter.html":{}}}],["coverage",{"_index":301,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["create",{"_index":157,"title":{},"body":{"injectables/BeWaterSmartService.html":{}}}],["ctx",{"_index":127,"title":{},"body":{"injectables/BeWaterSmartService.html":{}}}],["daily_seasonality",{"_index":61,"title":{},"body":{"interfaces/Algorithm.html":{},"interfaces/AllAlgorithms.html":{},"interfaces/AllModels.html":{},"interfaces/AllPhysicalMeters.html":{},"interfaces/AllVirtualMeters.html":{},"interfaces/ForeCast.html":{},"interfaces/MLModel.html":{},"interfaces/PhysicalMeter.html":{},"interfaces/VirtualMeter.html":{}}}],["data",{"_index":198,"title":{},"body":{"injectables/BeWaterSmartService.html":{}}}],["date",{"_index":25,"title":{},"body":{"interfaces/Algorithm.html":{},"interfaces/AllAlgorithms.html":{},"interfaces/AllModels.html":{},"interfaces/AllPhysicalMeters.html":{},"interfaces/AllVirtualMeters.html":{},"interfaces/ForeCast.html":{},"interfaces/MLModel.html":{},"interfaces/PhysicalMeter.html":{},"interfaces/VirtualMeter.html":{}}}],["datecreated",{"_index":30,"title":{},"body":{"interfaces/Algorithm.html":{},"interfaces/AllAlgorithms.html":{},"interfaces/AllModels.html":{},"interfaces/AllPhysicalMeters.html":{},"interfaces/AllVirtualMeters.html":{},"interfaces/ForeCast.html":{},"interfaces/MLModel.html":{},"interfaces/PhysicalMeter.html":{},"interfaces/VirtualMeter.html":{}}}],["datemodified",{"_index":39,"title":{},"body":{"interfaces/Algorithm.html":{},"interfaces/AllAlgorithms.html":{},"interfaces/AllModels.html":{},"interfaces/AllPhysicalMeters.html":{},"interfaces/AllVirtualMeters.html":{},"interfaces/ForeCast.html":{},"interfaces/MLModel.html":{},"interfaces/PhysicalMeter.html":{},"interfaces/VirtualMeter.html":{}}}],["datepredicted",{"_index":78,"title":{},"body":{"interfaces/Algorithm.html":{},"interfaces/AllAlgorithms.html":{},"interfaces/AllModels.html":{},"interfaces/AllPhysicalMeters.html":{},"interfaces/AllVirtualMeters.html":{},"interfaces/ForeCast.html":{},"interfaces/MLModel.html":{},"interfaces/PhysicalMeter.html":{},"interfaces/VirtualMeter.html":{}}}],["day",{"_index":49,"title":{},"body":{"interfaces/Algorithm.html":{},"interfaces/AllAlgorithms.html":{},"interfaces/AllModels.html":{},"interfaces/AllPhysicalMeters.html":{},"interfaces/AllVirtualMeters.html":{},"injectables/BeWaterSmartService.html":{},"interfaces/ForeCast.html":{},"interfaces/MLModel.html":{},"interfaces/PhysicalMeter.html":{},"interfaces/VirtualMeter.html":{}}}],["de_de",{"_index":389,"title":{},"body":{"miscellaneous/variables.html":{}}}],["debug",{"_index":292,"title":{},"body":{"injectables/BeWaterSmartService.html":{}}}],["declarations",{"_index":94,"title":{},"body":{"modules/BeWaterSmartModule.html":{},"overview.html":{}}}],["default",{"_index":250,"title":{},"body":{"injectables/BeWaterSmartService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["defined",{"_index":144,"title":{},"body":{"injectables/BeWaterSmartService.html":{}}}],["delete",{"_index":172,"title":{},"body":{"injectables/BeWaterSmartService.html":{}}}],["deleted",{"_index":191,"title":{},"body":{"injectables/BeWaterSmartService.html":{}}}],["deletes",{"_index":188,"title":{},"body":{"injectables/BeWaterSmartService.html":{}}}],["delmodel",{"_index":130,"title":{},"body":{"injectables/BeWaterSmartService.html":{}}}],["delmodel(meter",{"_index":169,"title":{},"body":{"injectables/BeWaterSmartService.html":{}}}],["delvirtualmeterbyid",{"_index":131,"title":{},"body":{"injectables/BeWaterSmartService.html":{}}}],["delvirtualmeterbyid(input",{"_index":186,"title":{},"body":{"injectables/BeWaterSmartService.html":{}}}],["dependencies",{"_index":92,"title":{"dependencies.html":{}},"body":{"modules/BeWaterSmartModule.html":{},"dependencies.html":{},"overview.html":{}}}],["description",{"_index":10,"title":{},"body":{"interfaces/Algorithm.html":{},"interfaces/AllAlgorithms.html":{},"interfaces/AllModels.html":{},"interfaces/AllPhysicalMeters.html":{},"interfaces/AllVirtualMeters.html":{},"injectables/BeWaterSmartService.html":{},"interfaces/ForeCast.html":{},"interfaces/MLModel.html":{},"interfaces/PhysicalMeter.html":{},"interfaces/VirtualMeter.html":{}}}],["directive|pipe|service|class|guard|interface|enum|module",{"_index":347,"title":{},"body":{"index.html":{}}}],["directly",{"_index":178,"title":{},"body":{"injectables/BeWaterSmartService.html":{}}}],["directory",{"_index":357,"title":{},"body":{"index.html":{}}}],["dist",{"_index":356,"title":{},"body":{"index.html":{}}}],["dist/be",{"_index":363,"title":{},"body":{"index.html":{}}}],["documentation",{"_index":302,"title":{},"body":{"coverage.html":{}}}],["don't",{"_index":182,"title":{},"body":{"injectables/BeWaterSmartService.html":{},"index.html":{}}}],["down",{"_index":181,"title":{},"body":{"injectables/BeWaterSmartService.html":{}}}],["empty",{"_index":82,"title":{},"body":{"interfaces/Algorithm.html":{},"interfaces/AllAlgorithms.html":{},"interfaces/AllModels.html":{},"interfaces/AllPhysicalMeters.html":{},"interfaces/AllVirtualMeters.html":{},"interfaces/ForeCast.html":{},"interfaces/MLModel.html":{},"interfaces/PhysicalMeter.html":{},"interfaces/VirtualMeter.html":{}}}],["en_us",{"_index":390,"title":{},"body":{"miscellaneous/variables.html":{}}}],["endpoint",{"_index":246,"title":{},"body":{"injectables/BeWaterSmartService.html":{}}}],["error",{"_index":167,"title":{},"body":{"injectables/BeWaterSmartService.html":{}}}],["estimatedtrainingtime",{"_index":11,"title":{},"body":{"interfaces/Algorithm.html":{},"interfaces/AllAlgorithms.html":{},"interfaces/AllModels.html":{},"interfaces/AllPhysicalMeters.html":{},"interfaces/AllVirtualMeters.html":{},"interfaces/ForeCast.html":{},"interfaces/MLModel.html":{},"interfaces/PhysicalMeter.html":{},"interfaces/VirtualMeter.html":{}}}],["evaluation",{"_index":40,"title":{},"body":{"interfaces/Algorithm.html":{},"interfaces/AllAlgorithms.html":{},"interfaces/AllModels.html":{},"interfaces/AllPhysicalMeters.html":{},"interfaces/AllVirtualMeters.html":{},"interfaces/ForeCast.html":{},"interfaces/MLModel.html":{},"interfaces/PhysicalMeter.html":{},"interfaces/VirtualMeter.html":{}}}],["execute",{"_index":368,"title":{},"body":{"index.html":{}}}],["execution",{"_index":227,"title":{},"body":{"injectables/BeWaterSmartService.html":{}}}],["export",{"_index":18,"title":{},"body":{"interfaces/Algorithm.html":{},"interfaces/AllAlgorithms.html":{},"interfaces/AllModels.html":{},"interfaces/AllPhysicalMeters.html":{},"interfaces/AllVirtualMeters.html":{},"modules/BeWaterSmartModule.html":{},"injectables/BeWaterSmartService.html":{},"interfaces/ForeCast.html":{},"interfaces/MLModel.html":{},"interfaces/PhysicalMeter.html":{},"interfaces/VirtualMeter.html":{}}}],["exports",{"_index":97,"title":{},"body":{"modules/BeWaterSmartModule.html":{},"overview.html":{}}}],["false",{"_index":255,"title":{},"body":{"injectables/BeWaterSmartService.html":{}}}],["file",{"_index":5,"title":{},"body":{"interfaces/Algorithm.html":{},"interfaces/AllAlgorithms.html":{},"interfaces/AllModels.html":{},"interfaces/AllPhysicalMeters.html":{},"interfaces/AllVirtualMeters.html":{},"modules/BeWaterSmartModule.html":{},"injectables/BeWaterSmartService.html":{},"interfaces/ForeCast.html":{},"interfaces/MLModel.html":{},"interfaces/PhysicalMeter.html":{},"interfaces/VirtualMeter.html":{},"coverage.html":{},"index.html":{}}}],["finalctx",{"_index":282,"title":{},"body":{"injectables/BeWaterSmartService.html":{}}}],["finalurl",{"_index":280,"title":{},"body":{"injectables/BeWaterSmartService.html":{}}}],["finalurl.tostring",{"_index":290,"title":{},"body":{"injectables/BeWaterSmartService.html":{}}}],["fixme",{"_index":277,"title":{},"body":{"injectables/BeWaterSmartService.html":{}}}],["folder",{"_index":361,"title":{},"body":{"index.html":{}}}],["forecast",{"_index":76,"title":{"interfaces/ForeCast.html":{}},"body":{"interfaces/Algorithm.html":{},"interfaces/AllAlgorithms.html":{},"interfaces/AllModels.html":{},"interfaces/AllPhysicalMeters.html":{},"interfaces/AllVirtualMeters.html":{},"injectables/BeWaterSmartService.html":{},"interfaces/ForeCast.html":{},"interfaces/MLModel.html":{},"interfaces/PhysicalMeter.html":{},"interfaces/VirtualMeter.html":{},"coverage.html":{}}}],["forget",{"_index":349,"title":{},"body":{"index.html":{}}}],["formsmodule",{"_index":113,"title":{},"body":{"modules/BeWaterSmartModule.html":{}}}],["further",{"_index":259,"title":{},"body":{"injectables/BeWaterSmartService.html":{},"index.html":{}}}],["generalized",{"_index":244,"title":{},"body":{"injectables/BeWaterSmartService.html":{}}}],["generate",{"_index":344,"title":{},"body":{"index.html":{}}}],["generated",{"_index":336,"title":{},"body":{"index.html":{}}}],["getalgorithms",{"_index":132,"title":{},"body":{"injectables/BeWaterSmartService.html":{}}}],["getcreateforecast",{"_index":133,"title":{},"body":{"injectables/BeWaterSmartService.html":{}}}],["getcreateforecast(meterid",{"_index":196,"title":{},"body":{"injectables/BeWaterSmartService.html":{}}}],["getdebugmessage",{"_index":134,"title":{},"body":{"injectables/BeWaterSmartService.html":{}}}],["getmodels",{"_index":135,"title":{},"body":{"injectables/BeWaterSmartService.html":{}}}],["getphysicalmeters",{"_index":136,"title":{},"body":{"injectables/BeWaterSmartService.html":{}}}],["getting",{"_index":332,"title":{"index.html":{}},"body":{}}],["getvirtualmeters",{"_index":137,"title":{},"body":{"injectables/BeWaterSmartService.html":{}}}],["go",{"_index":360,"title":{},"body":{"index.html":{}}}],["graph",{"_index":199,"title":{},"body":{"injectables/BeWaterSmartService.html":{}}}],["help",{"_index":370,"title":{},"body":{"index.html":{}}}],["here",{"_index":279,"title":{},"body":{"injectables/BeWaterSmartService.html":{}}}],["histrefvalues",{"_index":79,"title":{},"body":{"interfaces/Algorithm.html":{},"interfaces/AllAlgorithms.html":{},"interfaces/AllModels.html":{},"interfaces/AllPhysicalMeters.html":{},"interfaces/AllVirtualMeters.html":{},"interfaces/ForeCast.html":{},"interfaces/MLModel.html":{},"interfaces/PhysicalMeter.html":{},"interfaces/VirtualMeter.html":{}}}],["hold",{"_index":229,"title":{},"body":{"injectables/BeWaterSmartService.html":{}}}],["holding",{"_index":267,"title":{},"body":{"injectables/BeWaterSmartService.html":{},"miscellaneous/variables.html":{}}}],["http",{"_index":148,"title":{},"body":{"injectables/BeWaterSmartService.html":{}}}],["httpclient",{"_index":142,"title":{},"body":{"injectables/BeWaterSmartService.html":{}}}],["httpcontext",{"_index":240,"title":{},"body":{"injectables/BeWaterSmartService.html":{}}}],["hyperparameters",{"_index":59,"title":{},"body":{"interfaces/Algorithm.html":{},"interfaces/AllAlgorithms.html":{},"interfaces/AllModels.html":{},"interfaces/AllPhysicalMeters.html":{},"interfaces/AllVirtualMeters.html":{},"interfaces/ForeCast.html":{},"interfaces/MLModel.html":{},"interfaces/PhysicalMeter.html":{},"interfaces/VirtualMeter.html":{}}}],["id",{"_index":26,"title":{},"body":{"interfaces/Algorithm.html":{},"interfaces/AllAlgorithms.html":{},"interfaces/AllModels.html":{},"interfaces/AllPhysicalMeters.html":{},"interfaces/AllVirtualMeters.html":{},"injectables/BeWaterSmartService.html":{},"interfaces/ForeCast.html":{},"interfaces/MLModel.html":{},"interfaces/PhysicalMeter.html":{},"interfaces/VirtualMeter.html":{}}}],["identifier",{"_index":303,"title":{},"body":{"coverage.html":{}}}],["identify",{"_index":234,"title":{},"body":{"injectables/BeWaterSmartService.html":{}}}],["import",{"_index":108,"title":{},"body":{"modules/BeWaterSmartModule.html":{},"injectables/BeWaterSmartService.html":{}}}],["imports",{"_index":121,"title":{},"body":{"modules/BeWaterSmartModule.html":{}}}],["index",{"_index":8,"title":{"index.html":{}},"body":{"interfaces/Algorithm.html":{},"interfaces/AllAlgorithms.html":{},"interfaces/AllModels.html":{},"interfaces/AllPhysicalMeters.html":{},"interfaces/AllVirtualMeters.html":{},"injectables/BeWaterSmartService.html":{},"interfaces/ForeCast.html":{},"interfaces/MLModel.html":{},"interfaces/PhysicalMeter.html":{},"interfaces/VirtualMeter.html":{},"miscellaneous/variables.html":{}}}],["info",{"_index":3,"title":{},"body":{"interfaces/Algorithm.html":{},"interfaces/AllAlgorithms.html":{},"interfaces/AllModels.html":{},"interfaces/AllPhysicalMeters.html":{},"interfaces/AllVirtualMeters.html":{},"modules/BeWaterSmartModule.html":{},"injectables/BeWaterSmartService.html":{},"interfaces/ForeCast.html":{},"interfaces/MLModel.html":{},"interfaces/PhysicalMeter.html":{},"interfaces/VirtualMeter.html":{}}}],["information",{"_index":215,"title":{},"body":{"injectables/BeWaterSmartService.html":{}}}],["injectable",{"_index":123,"title":{"injectables/BeWaterSmartService.html":{}},"body":{"injectables/BeWaterSmartService.html":{},"coverage.html":{},"overview.html":{}}}],["injectables",{"_index":125,"title":{},"body":{"injectables/BeWaterSmartService.html":{}}}],["input",{"_index":190,"title":{},"body":{"injectables/BeWaterSmartService.html":{}}}],["input.name.tostring",{"_index":298,"title":{},"body":{"injectables/BeWaterSmartService.html":{}}}],["inputattributes",{"_index":64,"title":{},"body":{"interfaces/Algorithm.html":{},"interfaces/AllAlgorithms.html":{},"interfaces/AllModels.html":{},"interfaces/AllPhysicalMeters.html":{},"interfaces/AllVirtualMeters.html":{},"interfaces/ForeCast.html":{},"interfaces/MLModel.html":{},"interfaces/PhysicalMeter.html":{},"interfaces/VirtualMeter.html":{}}}],["interface",{"_index":0,"title":{"interfaces/Algorithm.html":{},"interfaces/AllAlgorithms.html":{},"interfaces/AllModels.html":{},"interfaces/AllPhysicalMeters.html":{},"interfaces/AllVirtualMeters.html":{},"interfaces/ForeCast.html":{},"interfaces/MLModel.html":{},"interfaces/PhysicalMeter.html":{},"interfaces/VirtualMeter.html":{}},"body":{"interfaces/Algorithm.html":{},"interfaces/AllAlgorithms.html":{},"interfaces/AllModels.html":{},"interfaces/AllPhysicalMeters.html":{},"interfaces/AllVirtualMeters.html":{},"injectables/BeWaterSmartService.html":{},"interfaces/ForeCast.html":{},"interfaces/MLModel.html":{},"interfaces/PhysicalMeter.html":{},"interfaces/VirtualMeter.html":{},"coverage.html":{}}}],["interfaces",{"_index":2,"title":{},"body":{"interfaces/Algorithm.html":{},"interfaces/AllAlgorithms.html":{},"interfaces/AllModels.html":{},"interfaces/AllPhysicalMeters.html":{},"interfaces/AllVirtualMeters.html":{},"injectables/BeWaterSmartService.html":{},"interfaces/ForeCast.html":{},"interfaces/MLModel.html":{},"interfaces/PhysicalMeter.html":{},"interfaces/VirtualMeter.html":{},"overview.html":{}}}],["interfaces.ts",{"_index":7,"title":{},"body":{"interfaces/Algorithm.html":{},"interfaces/AllAlgorithms.html":{},"interfaces/AllModels.html":{},"interfaces/AllPhysicalMeters.html":{},"interfaces/AllVirtualMeters.html":{},"interfaces/ForeCast.html":{},"interfaces/MLModel.html":{},"interfaces/PhysicalMeter.html":{},"interfaces/VirtualMeter.html":{},"coverage.html":{}}}],["is_holiday",{"_index":50,"title":{},"body":{"interfaces/Algorithm.html":{},"interfaces/AllAlgorithms.html":{},"interfaces/AllModels.html":{},"interfaces/AllPhysicalMeters.html":{},"interfaces/AllVirtualMeters.html":{},"interfaces/ForeCast.html":{},"interfaces/MLModel.html":{},"interfaces/PhysicalMeter.html":{},"interfaces/VirtualMeter.html":{}}}],["is_weekend",{"_index":51,"title":{},"body":{"interfaces/Algorithm.html":{},"interfaces/AllAlgorithms.html":{},"interfaces/AllModels.html":{},"interfaces/AllPhysicalMeters.html":{},"interfaces/AllVirtualMeters.html":{},"interfaces/ForeCast.html":{},"interfaces/MLModel.html":{},"interfaces/PhysicalMeter.html":{},"interfaces/VirtualMeter.html":{}}}],["isdefault",{"_index":69,"title":{},"body":{"interfaces/Algorithm.html":{},"interfaces/AllAlgorithms.html":{},"interfaces/AllModels.html":{},"interfaces/AllPhysicalMeters.html":{},"interfaces/AllVirtualMeters.html":{},"interfaces/ForeCast.html":{},"interfaces/MLModel.html":{},"interfaces/PhysicalMeter.html":{},"interfaces/VirtualMeter.html":{}}}],["ismodelvalid",{"_index":71,"title":{},"body":{"interfaces/Algorithm.html":{},"interfaces/AllAlgorithms.html":{},"interfaces/AllModels.html":{},"interfaces/AllPhysicalMeters.html":{},"interfaces/AllVirtualMeters.html":{},"interfaces/ForeCast.html":{},"interfaces/MLModel.html":{},"interfaces/PhysicalMeter.html":{},"interfaces/VirtualMeter.html":{}}}],["itself",{"_index":174,"title":{},"body":{"injectables/BeWaterSmartService.html":{}}}],["json",{"_index":286,"title":{},"body":{"injectables/BeWaterSmartService.html":{}}}],["karma",{"_index":369,"title":{},"body":{"index.html":{}}}],["know",{"_index":183,"title":{},"body":{"injectables/BeWaterSmartService.html":{}}}],["legend",{"_index":93,"title":{},"body":{"modules/BeWaterSmartModule.html":{},"overview.html":{}}}],["library",{"_index":335,"title":{},"body":{"index.html":{}}}],["list",{"_index":195,"title":{},"body":{"injectables/BeWaterSmartService.html":{}}}],["literal",{"_index":300,"title":{},"body":{"interfaces/ForeCast.html":{},"interfaces/MLModel.html":{},"interfaces/PhysicalMeter.html":{}}}],["loading",{"_index":223,"title":{},"body":{"injectables/BeWaterSmartService.html":{}}}],["long",{"_index":226,"title":{},"body":{"injectables/BeWaterSmartService.html":{}}}],["mape",{"_index":43,"title":{},"body":{"interfaces/Algorithm.html":{},"interfaces/AllAlgorithms.html":{},"interfaces/AllModels.html":{},"interfaces/AllPhysicalMeters.html":{},"interfaces/AllVirtualMeters.html":{},"interfaces/ForeCast.html":{},"interfaces/MLModel.html":{},"interfaces/PhysicalMeter.html":{},"interfaces/VirtualMeter.html":{}}}],["matching",{"_index":88,"title":{},"body":{"interfaces/Algorithm.html":{},"interfaces/AllAlgorithms.html":{},"interfaces/AllModels.html":{},"interfaces/AllPhysicalMeters.html":{},"interfaces/AllVirtualMeters.html":{},"modules/BeWaterSmartModule.html":{},"injectables/BeWaterSmartService.html":{},"interfaces/ForeCast.html":{},"interfaces/MLModel.html":{},"interfaces/PhysicalMeter.html":{},"interfaces/VirtualMeter.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["measuring",{"_index":202,"title":{},"body":{"injectables/BeWaterSmartService.html":{}}}],["message",{"_index":211,"title":{},"body":{"injectables/BeWaterSmartService.html":{}}}],["meter",{"_index":160,"title":{},"body":{"injectables/BeWaterSmartService.html":{}}}],["meter.id.tostring",{"_index":297,"title":{},"body":{"injectables/BeWaterSmartService.html":{}}}],["meterid",{"_index":200,"title":{},"body":{"injectables/BeWaterSmartService.html":{}}}],["meters",{"_index":28,"title":{},"body":{"interfaces/Algorithm.html":{},"interfaces/AllAlgorithms.html":{},"interfaces/AllModels.html":{},"interfaces/AllPhysicalMeters.html":{},"interfaces/AllVirtualMeters.html":{},"injectables/BeWaterSmartService.html":{},"interfaces/ForeCast.html":{},"interfaces/MLModel.html":{},"interfaces/PhysicalMeter.html":{},"interfaces/VirtualMeter.html":{}}}],["meters?name",{"_index":293,"title":{},"body":{"injectables/BeWaterSmartService.html":{}}}],["method",{"_index":208,"title":{},"body":{"injectables/BeWaterSmartService.html":{}}}],["methods",{"_index":128,"title":{},"body":{"injectables/BeWaterSmartService.html":{}}}],["metrics",{"_index":42,"title":{},"body":{"interfaces/Algorithm.html":{},"interfaces/AllAlgorithms.html":{},"interfaces/AllModels.html":{},"interfaces/AllPhysicalMeters.html":{},"interfaces/AllVirtualMeters.html":{},"interfaces/ForeCast.html":{},"interfaces/MLModel.html":{},"interfaces/PhysicalMeter.html":{},"interfaces/VirtualMeter.html":{}}}],["miscellaneous",{"_index":381,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["mlframework",{"_index":72,"title":{},"body":{"interfaces/Algorithm.html":{},"interfaces/AllAlgorithms.html":{},"interfaces/AllModels.html":{},"interfaces/AllPhysicalMeters.html":{},"interfaces/AllVirtualMeters.html":{},"interfaces/ForeCast.html":{},"interfaces/MLModel.html":{},"interfaces/PhysicalMeter.html":{},"interfaces/VirtualMeter.html":{}}}],["mlmodel",{"_index":37,"title":{"interfaces/MLModel.html":{}},"body":{"interfaces/Algorithm.html":{},"interfaces/AllAlgorithms.html":{},"interfaces/AllModels.html":{},"interfaces/AllPhysicalMeters.html":{},"interfaces/AllVirtualMeters.html":{},"injectables/BeWaterSmartService.html":{},"interfaces/ForeCast.html":{},"interfaces/MLModel.html":{},"interfaces/PhysicalMeter.html":{},"interfaces/VirtualMeter.html":{},"coverage.html":{}}}],["mlmodels",{"_index":75,"title":{},"body":{"interfaces/Algorithm.html":{},"interfaces/AllAlgorithms.html":{},"interfaces/AllModels.html":{},"interfaces/AllPhysicalMeters.html":{},"interfaces/AllVirtualMeters.html":{},"interfaces/ForeCast.html":{},"interfaces/MLModel.html":{},"interfaces/PhysicalMeter.html":{},"interfaces/VirtualMeter.html":{}}}],["mm",{"_index":67,"title":{},"body":{"interfaces/Algorithm.html":{},"interfaces/AllAlgorithms.html":{},"interfaces/AllModels.html":{},"interfaces/AllPhysicalMeters.html":{},"interfaces/AllVirtualMeters.html":{},"interfaces/ForeCast.html":{},"interfaces/MLModel.html":{},"interfaces/PhysicalMeter.html":{},"interfaces/VirtualMeter.html":{}}}],["model",{"_index":177,"title":{},"body":{"injectables/BeWaterSmartService.html":{}}}],["models",{"_index":213,"title":{},"body":{"injectables/BeWaterSmartService.html":{}}}],["module",{"_index":89,"title":{"modules/BeWaterSmartModule.html":{}},"body":{"modules/BeWaterSmartModule.html":{},"overview.html":{}}}],["modules",{"_index":91,"title":{"modules.html":{}},"body":{"modules/BeWaterSmartModule.html":{},"modules.html":{}}}],["month",{"_index":52,"title":{},"body":{"interfaces/Algorithm.html":{},"interfaces/AllAlgorithms.html":{},"interfaces/AllModels.html":{},"interfaces/AllPhysicalMeters.html":{},"interfaces/AllVirtualMeters.html":{},"interfaces/ForeCast.html":{},"interfaces/MLModel.html":{},"interfaces/PhysicalMeter.html":{},"interfaces/VirtualMeter.html":{}}}],["more",{"_index":371,"title":{},"body":{"index.html":{}}}],["mse",{"_index":44,"title":{},"body":{"interfaces/Algorithm.html":{},"interfaces/AllAlgorithms.html":{},"interfaces/AllModels.html":{},"interfaces/AllPhysicalMeters.html":{},"interfaces/AllVirtualMeters.html":{},"interfaces/ForeCast.html":{},"interfaces/MLModel.html":{},"interfaces/PhysicalMeter.html":{},"interfaces/VirtualMeter.html":{}}}],["msg",{"_index":168,"title":{},"body":{"injectables/BeWaterSmartService.html":{}}}],["name",{"_index":12,"title":{},"body":{"interfaces/Algorithm.html":{},"interfaces/AllAlgorithms.html":{},"interfaces/AllModels.html":{},"interfaces/AllPhysicalMeters.html":{},"interfaces/AllVirtualMeters.html":{},"injectables/BeWaterSmartService.html":{},"interfaces/ForeCast.html":{},"interfaces/MLModel.html":{},"interfaces/PhysicalMeter.html":{},"interfaces/VirtualMeter.html":{},"index.html":{}}}],["new",{"_index":158,"title":{},"body":{"injectables/BeWaterSmartService.html":{},"coverage.html":{},"index.html":{}}}],["next",{"_index":204,"title":{},"body":{"injectables/BeWaterSmartService.html":{}}}],["ng",{"_index":343,"title":{},"body":{"index.html":{}}}],["ngmodule",{"_index":111,"title":{},"body":{"modules/BeWaterSmartModule.html":{}}}],["ngx",{"_index":116,"title":{},"body":{"modules/BeWaterSmartModule.html":{}}}],["note",{"_index":348,"title":{},"body":{"index.html":{}}}],["npm",{"_index":364,"title":{},"body":{"index.html":{}}}],["null",{"_index":17,"title":{},"body":{"interfaces/Algorithm.html":{},"interfaces/AllAlgorithms.html":{},"interfaces/AllModels.html":{},"interfaces/AllPhysicalMeters.html":{},"interfaces/AllVirtualMeters.html":{},"interfaces/ForeCast.html":{},"interfaces/MLModel.html":{},"interfaces/PhysicalMeter.html":{},"interfaces/VirtualMeter.html":{}}}],["number",{"_index":16,"title":{},"body":{"interfaces/Algorithm.html":{},"interfaces/AllAlgorithms.html":{},"interfaces/AllModels.html":{},"interfaces/AllPhysicalMeters.html":{},"interfaces/AllVirtualMeters.html":{},"interfaces/ForeCast.html":{},"interfaces/MLModel.html":{},"interfaces/PhysicalMeter.html":{},"interfaces/VirtualMeter.html":{}}}],["numvalue",{"_index":84,"title":{},"body":{"interfaces/Algorithm.html":{},"interfaces/AllAlgorithms.html":{},"interfaces/AllModels.html":{},"interfaces/AllPhysicalMeters.html":{},"interfaces/AllVirtualMeters.html":{},"interfaces/ForeCast.html":{},"interfaces/MLModel.html":{},"interfaces/PhysicalMeter.html":{},"interfaces/VirtualMeter.html":{}}}],["object",{"_index":83,"title":{},"body":{"interfaces/Algorithm.html":{},"interfaces/AllAlgorithms.html":{},"interfaces/AllModels.html":{},"interfaces/AllPhysicalMeters.html":{},"interfaces/AllVirtualMeters.html":{},"interfaces/ForeCast.html":{},"interfaces/MLModel.html":{},"interfaces/PhysicalMeter.html":{},"interfaces/VirtualMeter.html":{}}}],["observable",{"_index":164,"title":{},"body":{"injectables/BeWaterSmartService.html":{}}}],["optional",{"_index":147,"title":{},"body":{"injectables/BeWaterSmartService.html":{}}}],["order",{"_index":156,"title":{},"body":{"injectables/BeWaterSmartService.html":{}}}],["original",{"_index":68,"title":{},"body":{"interfaces/Algorithm.html":{},"interfaces/AllAlgorithms.html":{},"interfaces/AllModels.html":{},"interfaces/AllPhysicalMeters.html":{},"interfaces/AllVirtualMeters.html":{},"interfaces/ForeCast.html":{},"interfaces/MLModel.html":{},"interfaces/PhysicalMeter.html":{},"interfaces/VirtualMeter.html":{}}}],["out",{"_index":104,"title":{},"body":{"modules/BeWaterSmartModule.html":{},"index.html":{},"overview.html":{}}}],["overview",{"_index":372,"title":{"overview.html":{}},"body":{"index.html":{},"overview.html":{}}}],["package",{"_index":327,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["page",{"_index":374,"title":{},"body":{"index.html":{}}}],["param",{"_index":276,"title":{},"body":{"injectables/BeWaterSmartService.html":{}}}],["parameters",{"_index":146,"title":{},"body":{"injectables/BeWaterSmartService.html":{}}}],["path",{"_index":386,"title":{},"body":{"miscellaneous/variables.html":{}}}],["peer",{"_index":330,"title":{},"body":{"dependencies.html":{}}}],["per",{"_index":189,"title":{},"body":{"injectables/BeWaterSmartService.html":{}}}],["physical",{"_index":161,"title":{},"body":{"injectables/BeWaterSmartService.html":{}}}],["physicalmeter",{"_index":19,"title":{"interfaces/PhysicalMeter.html":{}},"body":{"interfaces/Algorithm.html":{},"interfaces/AllAlgorithms.html":{},"interfaces/AllModels.html":{},"interfaces/AllPhysicalMeters.html":{},"interfaces/AllVirtualMeters.html":{},"interfaces/ForeCast.html":{},"interfaces/MLModel.html":{},"interfaces/PhysicalMeter.html":{},"interfaces/VirtualMeter.html":{},"coverage.html":{}}}],["pm",{"_index":216,"title":{},"body":{"injectables/BeWaterSmartService.html":{}}}],["points",{"_index":203,"title":{},"body":{"injectables/BeWaterSmartService.html":{}}}],["post",{"_index":237,"title":{},"body":{"injectables/BeWaterSmartService.html":{}}}],["posts",{"_index":152,"title":{},"body":{"injectables/BeWaterSmartService.html":{}}}],["precipitation",{"_index":66,"title":{},"body":{"interfaces/Algorithm.html":{},"interfaces/AllAlgorithms.html":{},"interfaces/AllModels.html":{},"interfaces/AllPhysicalMeters.html":{},"interfaces/AllVirtualMeters.html":{},"interfaces/ForeCast.html":{},"interfaces/MLModel.html":{},"interfaces/PhysicalMeter.html":{},"interfaces/VirtualMeter.html":{}}}],["precipitation_mm",{"_index":56,"title":{},"body":{"interfaces/Algorithm.html":{},"interfaces/AllAlgorithms.html":{},"interfaces/AllModels.html":{},"interfaces/AllPhysicalMeters.html":{},"interfaces/AllVirtualMeters.html":{},"interfaces/ForeCast.html":{},"interfaces/MLModel.html":{},"interfaces/PhysicalMeter.html":{},"interfaces/VirtualMeter.html":{}}}],["predictedtestconsumption",{"_index":47,"title":{},"body":{"interfaces/Algorithm.html":{},"interfaces/AllAlgorithms.html":{},"interfaces/AllModels.html":{},"interfaces/AllPhysicalMeters.html":{},"interfaces/AllVirtualMeters.html":{},"interfaces/ForeCast.html":{},"interfaces/MLModel.html":{},"interfaces/PhysicalMeter.html":{},"interfaces/VirtualMeter.html":{}}}],["prefix",{"_index":268,"title":{},"body":{"injectables/BeWaterSmartService.html":{},"miscellaneous/variables.html":{}}}],["private",{"_index":275,"title":{},"body":{"injectables/BeWaterSmartService.html":{}}}],["project",{"_index":345,"title":{},"body":{"index.html":{}}}],["properties",{"_index":9,"title":{"properties.html":{}},"body":{"interfaces/Algorithm.html":{},"interfaces/AllAlgorithms.html":{},"interfaces/AllModels.html":{},"interfaces/AllPhysicalMeters.html":{},"interfaces/AllVirtualMeters.html":{},"injectables/BeWaterSmartService.html":{},"interfaces/ForeCast.html":{},"interfaces/MLModel.html":{},"interfaces/PhysicalMeter.html":{},"interfaces/VirtualMeter.html":{},"properties.html":{}}}],["provided",{"_index":194,"title":{},"body":{"injectables/BeWaterSmartService.html":{}}}],["providedin",{"_index":272,"title":{},"body":{"injectables/BeWaterSmartService.html":{}}}],["providers",{"_index":96,"title":{},"body":{"modules/BeWaterSmartModule.html":{},"overview.html":{}}}],["publish",{"_index":365,"title":{},"body":{"index.html":{}}}],["publishing",{"_index":358,"title":{},"body":{"index.html":{}}}],["put",{"_index":238,"title":{},"body":{"injectables/BeWaterSmartService.html":{}}}],["puttrainmodel",{"_index":138,"title":{},"body":{"injectables/BeWaterSmartService.html":{}}}],["puttrainmodel(meter",{"_index":219,"title":{},"body":{"injectables/BeWaterSmartService.html":{}}}],["reach",{"_index":269,"title":{},"body":{"injectables/BeWaterSmartService.html":{},"miscellaneous/variables.html":{}}}],["reachability",{"_index":210,"title":{},"body":{"injectables/BeWaterSmartService.html":{}}}],["record",{"_index":80,"title":{},"body":{"interfaces/Algorithm.html":{},"interfaces/AllAlgorithms.html":{},"interfaces/AllModels.html":{},"interfaces/AllPhysicalMeters.html":{},"interfaces/AllVirtualMeters.html":{},"interfaces/ForeCast.html":{},"interfaces/MLModel.html":{},"interfaces/PhysicalMeter.html":{},"interfaces/VirtualMeter.html":{}}}],["refdevice",{"_index":85,"title":{},"body":{"interfaces/Algorithm.html":{},"interfaces/AllAlgorithms.html":{},"interfaces/AllModels.html":{},"interfaces/AllPhysicalMeters.html":{},"interfaces/AllVirtualMeters.html":{},"interfaces/ForeCast.html":{},"interfaces/MLModel.html":{},"interfaces/PhysicalMeter.html":{},"interfaces/VirtualMeter.html":{}}}],["reference",{"_index":176,"title":{},"body":{"injectables/BeWaterSmartService.html":{},"index.html":{}}}],["refmeter",{"_index":73,"title":{},"body":{"interfaces/Algorithm.html":{},"interfaces/AllAlgorithms.html":{},"interfaces/AllModels.html":{},"interfaces/AllPhysicalMeters.html":{},"interfaces/AllVirtualMeters.html":{},"interfaces/ForeCast.html":{},"interfaces/MLModel.html":{},"interfaces/PhysicalMeter.html":{},"interfaces/VirtualMeter.html":{}}}],["represents",{"_index":81,"title":{},"body":{"interfaces/Algorithm.html":{},"interfaces/AllAlgorithms.html":{},"interfaces/AllModels.html":{},"interfaces/AllPhysicalMeters.html":{},"interfaces/AllVirtualMeters.html":{},"interfaces/ForeCast.html":{},"interfaces/MLModel.html":{},"interfaces/PhysicalMeter.html":{},"interfaces/VirtualMeter.html":{}}}],["request",{"_index":153,"title":{},"body":{"injectables/BeWaterSmartService.html":{}}}],["requestbody",{"_index":241,"title":{},"body":{"injectables/BeWaterSmartService.html":{}}}],["requested",{"_index":173,"title":{},"body":{"injectables/BeWaterSmartService.html":{}}}],["requestoptions",{"_index":284,"title":{},"body":{"injectables/BeWaterSmartService.html":{}}}],["requests",{"_index":193,"title":{},"body":{"injectables/BeWaterSmartService.html":{}}}],["reset",{"_index":103,"title":{},"body":{"modules/BeWaterSmartModule.html":{},"overview.html":{}}}],["responsetype",{"_index":285,"title":{},"body":{"injectables/BeWaterSmartService.html":{}}}],["results",{"_index":87,"title":{},"body":{"interfaces/Algorithm.html":{},"interfaces/AllAlgorithms.html":{},"interfaces/AllModels.html":{},"interfaces/AllPhysicalMeters.html":{},"interfaces/AllVirtualMeters.html":{},"modules/BeWaterSmartModule.html":{},"injectables/BeWaterSmartService.html":{},"interfaces/ForeCast.html":{},"interfaces/MLModel.html":{},"interfaces/PhysicalMeter.html":{},"interfaces/VirtualMeter.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":288,"title":{},"body":{"injectables/BeWaterSmartService.html":{}}}],["returns",{"_index":163,"title":{},"body":{"injectables/BeWaterSmartService.html":{}}}],["rmse",{"_index":45,"title":{},"body":{"interfaces/Algorithm.html":{},"interfaces/AllAlgorithms.html":{},"interfaces/AllModels.html":{},"interfaces/AllPhysicalMeters.html":{},"interfaces/AllVirtualMeters.html":{},"interfaces/ForeCast.html":{},"interfaces/MLModel.html":{},"interfaces/PhysicalMeter.html":{},"interfaces/VirtualMeter.html":{}}}],["root",{"_index":273,"title":{},"body":{"injectables/BeWaterSmartService.html":{}}}],["route",{"_index":385,"title":{},"body":{"miscellaneous/variables.html":{}}}],["router",{"_index":143,"title":{},"body":{"injectables/BeWaterSmartService.html":{}}}],["run",{"_index":342,"title":{},"body":{"index.html":{}}}],["running",{"_index":366,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":265,"title":{},"body":{"injectables/BeWaterSmartService.html":{}}}],["scaffolding",{"_index":341,"title":{},"body":{"index.html":{}}}],["scopes",{"_index":387,"title":{},"body":{"miscellaneous/variables.html":{}}}],["send",{"_index":207,"title":{},"body":{"injectables/BeWaterSmartService.html":{}}}],["sendrequest",{"_index":139,"title":{},"body":{"injectables/BeWaterSmartService.html":{}}}],["sendrequest(method",{"_index":236,"title":{},"body":{"injectables/BeWaterSmartService.html":{}}}],["set",{"_index":249,"title":{},"body":{"injectables/BeWaterSmartService.html":{}}}],["set(use_api_url",{"_index":252,"title":{},"body":{"injectables/BeWaterSmartService.html":{}}}],["set(use_error_handler",{"_index":256,"title":{},"body":{"injectables/BeWaterSmartService.html":{}}}],["set(use_loader",{"_index":254,"title":{},"body":{"injectables/BeWaterSmartService.html":{}}}],["single",{"_index":230,"title":{},"body":{"injectables/BeWaterSmartService.html":{}}}],["smape",{"_index":46,"title":{},"body":{"interfaces/Algorithm.html":{},"interfaces/AllAlgorithms.html":{},"interfaces/AllModels.html":{},"interfaces/AllPhysicalMeters.html":{},"interfaces/AllVirtualMeters.html":{},"interfaces/ForeCast.html":{},"interfaces/MLModel.html":{},"interfaces/PhysicalMeter.html":{},"interfaces/VirtualMeter.html":{}}}],["smart",{"_index":346,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["smart.component",{"_index":120,"title":{},"body":{"modules/BeWaterSmartModule.html":{}}}],["smart.component.ts",{"_index":305,"title":{},"body":{"coverage.html":{}}}],["smart.module.ts",{"_index":107,"title":{},"body":{"modules/BeWaterSmartModule.html":{}}}],["smart.service.ts",{"_index":126,"title":{},"body":{"injectables/BeWaterSmartService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["smart.service.ts:105",{"_index":197,"title":{},"body":{"injectables/BeWaterSmartService.html":{}}}],["smart.service.ts:117",{"_index":151,"title":{},"body":{"injectables/BeWaterSmartService.html":{}}}],["smart.service.ts:128",{"_index":187,"title":{},"body":{"injectables/BeWaterSmartService.html":{}}}],["smart.service.ts:144",{"_index":220,"title":{},"body":{"injectables/BeWaterSmartService.html":{}}}],["smart.service.ts:170",{"_index":171,"title":{},"body":{"injectables/BeWaterSmartService.html":{}}}],["smart.service.ts:29",{"_index":258,"title":{},"body":{"injectables/BeWaterSmartService.html":{}}}],["smart.service.ts:32",{"_index":145,"title":{},"body":{"injectables/BeWaterSmartService.html":{}}}],["smart.service.ts:44",{"_index":242,"title":{},"body":{"injectables/BeWaterSmartService.html":{}}}],["smart.service.ts:63",{"_index":205,"title":{},"body":{"injectables/BeWaterSmartService.html":{}}}],["smart.service.ts:71",{"_index":214,"title":{},"body":{"injectables/BeWaterSmartService.html":{}}}],["smart.service.ts:79",{"_index":217,"title":{},"body":{"injectables/BeWaterSmartService.html":{}}}],["smart.service.ts:87",{"_index":192,"title":{},"body":{"injectables/BeWaterSmartService.html":{}}}],["smart.service.ts:95",{"_index":212,"title":{},"body":{"injectables/BeWaterSmartService.html":{}}}],["source",{"_index":4,"title":{},"body":{"interfaces/Algorithm.html":{},"interfaces/AllAlgorithms.html":{},"interfaces/AllModels.html":{},"interfaces/AllPhysicalMeters.html":{},"interfaces/AllVirtualMeters.html":{},"modules/BeWaterSmartModule.html":{},"injectables/BeWaterSmartService.html":{},"interfaces/ForeCast.html":{},"interfaces/MLModel.html":{},"interfaces/PhysicalMeter.html":{},"interfaces/VirtualMeter.html":{}}}],["src/.../be",{"_index":383,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../public",{"_index":384,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/lib/be",{"_index":105,"title":{},"body":{"modules/BeWaterSmartModule.html":{},"injectables/BeWaterSmartService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/lib/bws",{"_index":6,"title":{},"body":{"interfaces/Algorithm.html":{},"interfaces/AllAlgorithms.html":{},"interfaces/AllModels.html":{},"interfaces/AllPhysicalMeters.html":{},"interfaces/AllVirtualMeters.html":{},"interfaces/ForeCast.html":{},"interfaces/MLModel.html":{},"interfaces/PhysicalMeter.html":{},"interfaces/VirtualMeter.html":{},"coverage.html":{}}}],["src/public",{"_index":321,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["started",{"_index":333,"title":{"index.html":{}},"body":{}}],["statements",{"_index":304,"title":{},"body":{"coverage.html":{}}}],["stored",{"_index":355,"title":{},"body":{"index.html":{}}}],["streetaddress",{"_index":23,"title":{},"body":{"interfaces/Algorithm.html":{},"interfaces/AllAlgorithms.html":{},"interfaces/AllModels.html":{},"interfaces/AllPhysicalMeters.html":{},"interfaces/AllVirtualMeters.html":{},"interfaces/ForeCast.html":{},"interfaces/MLModel.html":{},"interfaces/PhysicalMeter.html":{},"interfaces/VirtualMeter.html":{}}}],["string",{"_index":13,"title":{},"body":{"interfaces/Algorithm.html":{},"interfaces/AllAlgorithms.html":{},"interfaces/AllModels.html":{},"interfaces/AllPhysicalMeters.html":{},"interfaces/AllVirtualMeters.html":{},"injectables/BeWaterSmartService.html":{},"interfaces/ForeCast.html":{},"interfaces/MLModel.html":{},"interfaces/PhysicalMeter.html":{},"interfaces/VirtualMeter.html":{},"miscellaneous/variables.html":{}}}],["submeterids",{"_index":31,"title":{},"body":{"interfaces/Algorithm.html":{},"interfaces/AllAlgorithms.html":{},"interfaces/AllModels.html":{},"interfaces/AllPhysicalMeters.html":{},"interfaces/AllVirtualMeters.html":{},"interfaces/ForeCast.html":{},"interfaces/MLModel.html":{},"interfaces/PhysicalMeter.html":{},"interfaces/VirtualMeter.html":{}}}],["submeters",{"_index":150,"title":{},"body":{"injectables/BeWaterSmartService.html":{}}}],["success",{"_index":166,"title":{},"body":{"injectables/BeWaterSmartService.html":{}}}],["supermeterids",{"_index":32,"title":{},"body":{"interfaces/Algorithm.html":{},"interfaces/AllAlgorithms.html":{},"interfaces/AllModels.html":{},"interfaces/AllPhysicalMeters.html":{},"interfaces/AllVirtualMeters.html":{},"interfaces/ForeCast.html":{},"interfaces/MLModel.html":{},"interfaces/PhysicalMeter.html":{},"interfaces/VirtualMeter.html":{}}}],["support",{"_index":376,"title":{},"body":{"modules.html":{}}}],["svg",{"_index":377,"title":{},"body":{"modules.html":{}}}],["t",{"_index":243,"title":{},"body":{"injectables/BeWaterSmartService.html":{}}}],["table",{"_index":326,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":325,"title":{},"body":{"coverage.html":{}}}],["test",{"_index":209,"title":{},"body":{"injectables/BeWaterSmartService.html":{},"index.html":{}}}],["testcovariates",{"_index":48,"title":{},"body":{"interfaces/Algorithm.html":{},"interfaces/AllAlgorithms.html":{},"interfaces/AllModels.html":{},"interfaces/AllPhysicalMeters.html":{},"interfaces/AllVirtualMeters.html":{},"interfaces/ForeCast.html":{},"interfaces/MLModel.html":{},"interfaces/PhysicalMeter.html":{},"interfaces/VirtualMeter.html":{}}}],["tests",{"_index":367,"title":{},"body":{"index.html":{}}}],["testtimestamps",{"_index":58,"title":{},"body":{"interfaces/Algorithm.html":{},"interfaces/AllAlgorithms.html":{},"interfaces/AllModels.html":{},"interfaces/AllPhysicalMeters.html":{},"interfaces/AllVirtualMeters.html":{},"interfaces/ForeCast.html":{},"interfaces/MLModel.html":{},"interfaces/PhysicalMeter.html":{},"interfaces/VirtualMeter.html":{}}}],["this.ctx",{"_index":283,"title":{},"body":{"injectables/BeWaterSmartService.html":{}}}],["this.http.request(method",{"_index":289,"title":{},"body":{"injectables/BeWaterSmartService.html":{}}}],["this.router.parseurl(api_prefix",{"_index":281,"title":{},"body":{"injectables/BeWaterSmartService.html":{}}}],["this.sendrequest(\"delete",{"_index":295,"title":{},"body":{"injectables/BeWaterSmartService.html":{}}}],["this.sendrequest(\"get",{"_index":291,"title":{},"body":{"injectables/BeWaterSmartService.html":{}}}],["this.sendrequest(\"post",{"_index":294,"title":{},"body":{"injectables/BeWaterSmartService.html":{}}}],["this.sendrequest(\"put",{"_index":299,"title":{},"body":{"injectables/BeWaterSmartService.html":{}}}],["time",{"_index":228,"title":{},"body":{"injectables/BeWaterSmartService.html":{}}}],["todo",{"_index":53,"title":{},"body":{"interfaces/Algorithm.html":{},"interfaces/AllAlgorithms.html":{},"interfaces/AllModels.html":{},"interfaces/AllPhysicalMeters.html":{},"interfaces/AllVirtualMeters.html":{},"interfaces/ForeCast.html":{},"interfaces/MLModel.html":{},"interfaces/PhysicalMeter.html":{},"interfaces/VirtualMeter.html":{}}}],["tracks",{"_index":180,"title":{},"body":{"injectables/BeWaterSmartService.html":{}}}],["train",{"_index":184,"title":{},"body":{"injectables/BeWaterSmartService.html":{}}}],["trained",{"_index":185,"title":{},"body":{"injectables/BeWaterSmartService.html":{}}}],["training",{"_index":232,"title":{},"body":{"injectables/BeWaterSmartService.html":{}}}],["translate/core",{"_index":117,"title":{},"body":{"modules/BeWaterSmartModule.html":{}}}],["translatemodule",{"_index":115,"title":{},"body":{"modules/BeWaterSmartModule.html":{}}}],["translations",{"_index":388,"title":{},"body":{"miscellaneous/variables.html":{}}}],["true",{"_index":253,"title":{},"body":{"injectables/BeWaterSmartService.html":{}}}],["tslib",{"_index":328,"title":{},"body":{"dependencies.html":{}}}],["type",{"_index":14,"title":{},"body":{"interfaces/Algorithm.html":{},"interfaces/AllAlgorithms.html":{},"interfaces/AllModels.html":{},"interfaces/AllPhysicalMeters.html":{},"interfaces/AllVirtualMeters.html":{},"injectables/BeWaterSmartService.html":{},"interfaces/ForeCast.html":{},"interfaces/MLModel.html":{},"interfaces/PhysicalMeter.html":{},"interfaces/VirtualMeter.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["unit",{"_index":86,"title":{},"body":{"interfaces/Algorithm.html":{},"interfaces/AllAlgorithms.html":{},"interfaces/AllModels.html":{},"interfaces/AllPhysicalMeters.html":{},"interfaces/AllVirtualMeters.html":{},"interfaces/ForeCast.html":{},"interfaces/MLModel.html":{},"interfaces/PhysicalMeter.html":{},"interfaces/VirtualMeter.html":{},"index.html":{}}}],["url",{"_index":239,"title":{},"body":{"injectables/BeWaterSmartService.html":{}}}],["use",{"_index":245,"title":{},"body":{"injectables/BeWaterSmartService.html":{},"index.html":{}}}],["use_api_url",{"_index":262,"title":{},"body":{"injectables/BeWaterSmartService.html":{}}}],["use_error_handler",{"_index":264,"title":{},"body":{"injectables/BeWaterSmartService.html":{}}}],["use_loader",{"_index":263,"title":{},"body":{"injectables/BeWaterSmartService.html":{}}}],["used",{"_index":179,"title":{},"body":{"injectables/BeWaterSmartService.html":{}}}],["uses",{"_index":206,"title":{},"body":{"injectables/BeWaterSmartService.html":{}}}],["using",{"_index":222,"title":{},"body":{"injectables/BeWaterSmartService.html":{}}}],["value",{"_index":251,"title":{},"body":{"injectables/BeWaterSmartService.html":{},"miscellaneous/variables.html":{}}}],["variable",{"_index":311,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":382,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["version",{"_index":339,"title":{},"body":{"index.html":{},"properties.html":{}}}],["via",{"_index":221,"title":{},"body":{"injectables/BeWaterSmartService.html":{},"index.html":{}}}],["virt",{"_index":296,"title":{},"body":{"injectables/BeWaterSmartService.html":{}}}],["virtual",{"_index":159,"title":{},"body":{"injectables/BeWaterSmartService.html":{}}}],["virtualmeter",{"_index":29,"title":{"interfaces/VirtualMeter.html":{}},"body":{"interfaces/Algorithm.html":{},"interfaces/AllAlgorithms.html":{},"interfaces/AllModels.html":{},"interfaces/AllPhysicalMeters.html":{},"interfaces/AllVirtualMeters.html":{},"injectables/BeWaterSmartService.html":{},"interfaces/ForeCast.html":{},"interfaces/MLModel.html":{},"interfaces/PhysicalMeter.html":{},"interfaces/VirtualMeter.html":{},"coverage.html":{}}}],["virtualmeters",{"_index":34,"title":{},"body":{"interfaces/Algorithm.html":{},"interfaces/AllAlgorithms.html":{},"interfaces/AllModels.html":{},"interfaces/AllPhysicalMeters.html":{},"interfaces/AllVirtualMeters.html":{},"interfaces/ForeCast.html":{},"interfaces/MLModel.html":{},"interfaces/PhysicalMeter.html":{},"interfaces/VirtualMeter.html":{}}}],["vm",{"_index":218,"title":{},"body":{"injectables/BeWaterSmartService.html":{}}}],["water",{"_index":106,"title":{},"body":{"modules/BeWaterSmartModule.html":{},"injectables/BeWaterSmartService.html":{},"coverage.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["waterconsumption",{"_index":65,"title":{},"body":{"interfaces/Algorithm.html":{},"interfaces/AllAlgorithms.html":{},"interfaces/AllModels.html":{},"interfaces/AllPhysicalMeters.html":{},"interfaces/AllVirtualMeters.html":{},"interfaces/ForeCast.html":{},"interfaces/MLModel.html":{},"interfaces/PhysicalMeter.html":{},"interfaces/VirtualMeter.html":{}}}],["weekly_seasonality",{"_index":62,"title":{},"body":{"interfaces/Algorithm.html":{},"interfaces/AllAlgorithms.html":{},"interfaces/AllModels.html":{},"interfaces/AllPhysicalMeters.html":{},"interfaces/AllVirtualMeters.html":{},"interfaces/ForeCast.html":{},"interfaces/MLModel.html":{},"interfaces/PhysicalMeter.html":{},"interfaces/VirtualMeter.html":{}}}],["wisdominterface",{"_index":323,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["wisdommodule",{"_index":118,"title":{},"body":{"modules/BeWaterSmartModule.html":{}}}],["year",{"_index":57,"title":{},"body":{"interfaces/Algorithm.html":{},"interfaces/AllAlgorithms.html":{},"interfaces/AllModels.html":{},"interfaces/AllPhysicalMeters.html":{},"interfaces/AllVirtualMeters.html":{},"interfaces/ForeCast.html":{},"interfaces/MLModel.html":{},"interfaces/PhysicalMeter.html":{},"interfaces/VirtualMeter.html":{}}}],["yearly_seasonality",{"_index":63,"title":{},"body":{"interfaces/Algorithm.html":{},"interfaces/AllAlgorithms.html":{},"interfaces/AllModels.html":{},"interfaces/AllPhysicalMeters.html":{},"interfaces/AllVirtualMeters.html":{},"interfaces/ForeCast.html":{},"interfaces/MLModel.html":{},"interfaces/PhysicalMeter.html":{},"interfaces/VirtualMeter.html":{}}}],["yes",{"_index":233,"title":{},"body":{"injectables/BeWaterSmartService.html":{}}}],["zoom",{"_index":102,"title":{},"body":{"modules/BeWaterSmartModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"interfaces/Algorithm.html":{"url":"interfaces/Algorithm.html","title":"interface - Algorithm","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Algorithm\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/bws-interfaces.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            description\n                                        \n                                \n                                \n                                        \n                                            estimatedTrainingTime\n                                        \n                                \n                                \n                                        \n                                            name\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        description\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        description:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        estimatedTrainingTime\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        estimatedTrainingTime:     number | null\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     number | null\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface PhysicalMeter {\n    address: {\n        addressCountry: string;\n        addressLocality: string;\n        streetAddress: string;\n    };\n    category: string;\n    date: string;\n    description: string;\n    id: string;\n    type: string;\n}\n\nexport interface AllPhysicalMeters {\n    meters: PhysicalMeter[];\n}\n\nexport interface VirtualMeter {\n    dateCreated: string;\n    description: string;\n    id: string;\n    submeterIds: string[];\n    supermeterIds: string[];\n}\n\nexport interface AllVirtualMeters {\n    virtualMeters: VirtualMeter[];\n}\n\nexport interface Algorithm {\n    description: string;\n    estimatedTrainingTime: number | null;\n    name: string;\n}\n\nexport interface AllAlgorithms {\n    algorithms: Algorithm[];\n}\n\nexport interface MLModel {\n    algorithm: string;\n    comment: string;\n    dateCreated: string;\n    dateModified: string;\n    description: string;\n    evaluation: {\n        actualTestConsumption: number[],\n        metrics: {\n            mape: number,\n            mse: number,\n            rmse: number,\n            smape: number\n        };\n        predictedTestConsumption: number[];\n        testCovariates: {\n            day: number[],\n            is_holiday: number[],\n            is_weekend: number[],\n            month: number[],\n            //TODO check if this is correct precipitation_mm\n            precipitation_mm: number[],\n            year: number[]\n        };\n        testTimestamps: number[]\n    };\n    hyperparameters: {\n        country_holidays: string,\n        daily_seasonality: number,\n        weekly_seasonality: number,\n        yearly_seasonality: number\n    };\n    id: string;\n    inputAttributes: [\n        waterConsumption: string,\n        day: string,\n        month: string,\n        year: string,\n        is_weekend: string,\n        is_holiday: string,\n        // precipitation (mm) original\n        precipitation_mm: string\n    ];\n    isDefault: boolean;\n    isModelValid: boolean;\n    mlFramework: string;\n    refMeter: string;\n}\n\nexport interface AllModels {\n    MLModels: MLModel[];\n}\n\nexport interface ForeCast {\n    covariateValues: {\n        day: number;\n        is_holiday: number;\n        is_weekend: number;\n        month: number;\n        \"precipitation (mm)\": number;\n        year: number;\n    };\n    datePredicted: string;\n    histRefValues: Record; // This represents an empty object {}\n    id: string;\n    numValue: number;\n    refDevice: string;\n    type: string;\n    unit: string;\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/AllAlgorithms.html":{"url":"interfaces/AllAlgorithms.html","title":"interface - AllAlgorithms","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  AllAlgorithms\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/bws-interfaces.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            algorithms\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        algorithms\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        algorithms:         Algorithm[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Algorithm[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface PhysicalMeter {\n    address: {\n        addressCountry: string;\n        addressLocality: string;\n        streetAddress: string;\n    };\n    category: string;\n    date: string;\n    description: string;\n    id: string;\n    type: string;\n}\n\nexport interface AllPhysicalMeters {\n    meters: PhysicalMeter[];\n}\n\nexport interface VirtualMeter {\n    dateCreated: string;\n    description: string;\n    id: string;\n    submeterIds: string[];\n    supermeterIds: string[];\n}\n\nexport interface AllVirtualMeters {\n    virtualMeters: VirtualMeter[];\n}\n\nexport interface Algorithm {\n    description: string;\n    estimatedTrainingTime: number | null;\n    name: string;\n}\n\nexport interface AllAlgorithms {\n    algorithms: Algorithm[];\n}\n\nexport interface MLModel {\n    algorithm: string;\n    comment: string;\n    dateCreated: string;\n    dateModified: string;\n    description: string;\n    evaluation: {\n        actualTestConsumption: number[],\n        metrics: {\n            mape: number,\n            mse: number,\n            rmse: number,\n            smape: number\n        };\n        predictedTestConsumption: number[];\n        testCovariates: {\n            day: number[],\n            is_holiday: number[],\n            is_weekend: number[],\n            month: number[],\n            //TODO check if this is correct precipitation_mm\n            precipitation_mm: number[],\n            year: number[]\n        };\n        testTimestamps: number[]\n    };\n    hyperparameters: {\n        country_holidays: string,\n        daily_seasonality: number,\n        weekly_seasonality: number,\n        yearly_seasonality: number\n    };\n    id: string;\n    inputAttributes: [\n        waterConsumption: string,\n        day: string,\n        month: string,\n        year: string,\n        is_weekend: string,\n        is_holiday: string,\n        // precipitation (mm) original\n        precipitation_mm: string\n    ];\n    isDefault: boolean;\n    isModelValid: boolean;\n    mlFramework: string;\n    refMeter: string;\n}\n\nexport interface AllModels {\n    MLModels: MLModel[];\n}\n\nexport interface ForeCast {\n    covariateValues: {\n        day: number;\n        is_holiday: number;\n        is_weekend: number;\n        month: number;\n        \"precipitation (mm)\": number;\n        year: number;\n    };\n    datePredicted: string;\n    histRefValues: Record; // This represents an empty object {}\n    id: string;\n    numValue: number;\n    refDevice: string;\n    type: string;\n    unit: string;\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/AllModels.html":{"url":"interfaces/AllModels.html","title":"interface - AllModels","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  AllModels\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/bws-interfaces.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            MLModels\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        MLModels\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        MLModels:         MLModel[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         MLModel[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface PhysicalMeter {\n    address: {\n        addressCountry: string;\n        addressLocality: string;\n        streetAddress: string;\n    };\n    category: string;\n    date: string;\n    description: string;\n    id: string;\n    type: string;\n}\n\nexport interface AllPhysicalMeters {\n    meters: PhysicalMeter[];\n}\n\nexport interface VirtualMeter {\n    dateCreated: string;\n    description: string;\n    id: string;\n    submeterIds: string[];\n    supermeterIds: string[];\n}\n\nexport interface AllVirtualMeters {\n    virtualMeters: VirtualMeter[];\n}\n\nexport interface Algorithm {\n    description: string;\n    estimatedTrainingTime: number | null;\n    name: string;\n}\n\nexport interface AllAlgorithms {\n    algorithms: Algorithm[];\n}\n\nexport interface MLModel {\n    algorithm: string;\n    comment: string;\n    dateCreated: string;\n    dateModified: string;\n    description: string;\n    evaluation: {\n        actualTestConsumption: number[],\n        metrics: {\n            mape: number,\n            mse: number,\n            rmse: number,\n            smape: number\n        };\n        predictedTestConsumption: number[];\n        testCovariates: {\n            day: number[],\n            is_holiday: number[],\n            is_weekend: number[],\n            month: number[],\n            //TODO check if this is correct precipitation_mm\n            precipitation_mm: number[],\n            year: number[]\n        };\n        testTimestamps: number[]\n    };\n    hyperparameters: {\n        country_holidays: string,\n        daily_seasonality: number,\n        weekly_seasonality: number,\n        yearly_seasonality: number\n    };\n    id: string;\n    inputAttributes: [\n        waterConsumption: string,\n        day: string,\n        month: string,\n        year: string,\n        is_weekend: string,\n        is_holiday: string,\n        // precipitation (mm) original\n        precipitation_mm: string\n    ];\n    isDefault: boolean;\n    isModelValid: boolean;\n    mlFramework: string;\n    refMeter: string;\n}\n\nexport interface AllModels {\n    MLModels: MLModel[];\n}\n\nexport interface ForeCast {\n    covariateValues: {\n        day: number;\n        is_holiday: number;\n        is_weekend: number;\n        month: number;\n        \"precipitation (mm)\": number;\n        year: number;\n    };\n    datePredicted: string;\n    histRefValues: Record; // This represents an empty object {}\n    id: string;\n    numValue: number;\n    refDevice: string;\n    type: string;\n    unit: string;\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/AllPhysicalMeters.html":{"url":"interfaces/AllPhysicalMeters.html","title":"interface - AllPhysicalMeters","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  AllPhysicalMeters\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/bws-interfaces.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            meters\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        meters\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        meters:         PhysicalMeter[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         PhysicalMeter[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface PhysicalMeter {\n    address: {\n        addressCountry: string;\n        addressLocality: string;\n        streetAddress: string;\n    };\n    category: string;\n    date: string;\n    description: string;\n    id: string;\n    type: string;\n}\n\nexport interface AllPhysicalMeters {\n    meters: PhysicalMeter[];\n}\n\nexport interface VirtualMeter {\n    dateCreated: string;\n    description: string;\n    id: string;\n    submeterIds: string[];\n    supermeterIds: string[];\n}\n\nexport interface AllVirtualMeters {\n    virtualMeters: VirtualMeter[];\n}\n\nexport interface Algorithm {\n    description: string;\n    estimatedTrainingTime: number | null;\n    name: string;\n}\n\nexport interface AllAlgorithms {\n    algorithms: Algorithm[];\n}\n\nexport interface MLModel {\n    algorithm: string;\n    comment: string;\n    dateCreated: string;\n    dateModified: string;\n    description: string;\n    evaluation: {\n        actualTestConsumption: number[],\n        metrics: {\n            mape: number,\n            mse: number,\n            rmse: number,\n            smape: number\n        };\n        predictedTestConsumption: number[];\n        testCovariates: {\n            day: number[],\n            is_holiday: number[],\n            is_weekend: number[],\n            month: number[],\n            //TODO check if this is correct precipitation_mm\n            precipitation_mm: number[],\n            year: number[]\n        };\n        testTimestamps: number[]\n    };\n    hyperparameters: {\n        country_holidays: string,\n        daily_seasonality: number,\n        weekly_seasonality: number,\n        yearly_seasonality: number\n    };\n    id: string;\n    inputAttributes: [\n        waterConsumption: string,\n        day: string,\n        month: string,\n        year: string,\n        is_weekend: string,\n        is_holiday: string,\n        // precipitation (mm) original\n        precipitation_mm: string\n    ];\n    isDefault: boolean;\n    isModelValid: boolean;\n    mlFramework: string;\n    refMeter: string;\n}\n\nexport interface AllModels {\n    MLModels: MLModel[];\n}\n\nexport interface ForeCast {\n    covariateValues: {\n        day: number;\n        is_holiday: number;\n        is_weekend: number;\n        month: number;\n        \"precipitation (mm)\": number;\n        year: number;\n    };\n    datePredicted: string;\n    histRefValues: Record; // This represents an empty object {}\n    id: string;\n    numValue: number;\n    refDevice: string;\n    type: string;\n    unit: string;\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/AllVirtualMeters.html":{"url":"interfaces/AllVirtualMeters.html","title":"interface - AllVirtualMeters","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  AllVirtualMeters\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/bws-interfaces.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            virtualMeters\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        virtualMeters\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        virtualMeters:         VirtualMeter[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         VirtualMeter[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface PhysicalMeter {\n    address: {\n        addressCountry: string;\n        addressLocality: string;\n        streetAddress: string;\n    };\n    category: string;\n    date: string;\n    description: string;\n    id: string;\n    type: string;\n}\n\nexport interface AllPhysicalMeters {\n    meters: PhysicalMeter[];\n}\n\nexport interface VirtualMeter {\n    dateCreated: string;\n    description: string;\n    id: string;\n    submeterIds: string[];\n    supermeterIds: string[];\n}\n\nexport interface AllVirtualMeters {\n    virtualMeters: VirtualMeter[];\n}\n\nexport interface Algorithm {\n    description: string;\n    estimatedTrainingTime: number | null;\n    name: string;\n}\n\nexport interface AllAlgorithms {\n    algorithms: Algorithm[];\n}\n\nexport interface MLModel {\n    algorithm: string;\n    comment: string;\n    dateCreated: string;\n    dateModified: string;\n    description: string;\n    evaluation: {\n        actualTestConsumption: number[],\n        metrics: {\n            mape: number,\n            mse: number,\n            rmse: number,\n            smape: number\n        };\n        predictedTestConsumption: number[];\n        testCovariates: {\n            day: number[],\n            is_holiday: number[],\n            is_weekend: number[],\n            month: number[],\n            //TODO check if this is correct precipitation_mm\n            precipitation_mm: number[],\n            year: number[]\n        };\n        testTimestamps: number[]\n    };\n    hyperparameters: {\n        country_holidays: string,\n        daily_seasonality: number,\n        weekly_seasonality: number,\n        yearly_seasonality: number\n    };\n    id: string;\n    inputAttributes: [\n        waterConsumption: string,\n        day: string,\n        month: string,\n        year: string,\n        is_weekend: string,\n        is_holiday: string,\n        // precipitation (mm) original\n        precipitation_mm: string\n    ];\n    isDefault: boolean;\n    isModelValid: boolean;\n    mlFramework: string;\n    refMeter: string;\n}\n\nexport interface AllModels {\n    MLModels: MLModel[];\n}\n\nexport interface ForeCast {\n    covariateValues: {\n        day: number;\n        is_holiday: number;\n        is_weekend: number;\n        month: number;\n        \"precipitation (mm)\": number;\n        year: number;\n    };\n    datePredicted: string;\n    histRefValues: Record; // This represents an empty object {}\n    id: string;\n    numValue: number;\n    refDevice: string;\n    type: string;\n    unit: string;\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/BeWaterSmartModule.html":{"url":"modules/BeWaterSmartModule.html","title":"module - BeWaterSmartModule","body":"\n                   \n\n\n\n\n    Modules\n    BeWaterSmartModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_BeWaterSmartModule\n\n\n\ncluster_BeWaterSmartModule_declarations\n\n\n\ncluster_BeWaterSmartModule_exports\n\n\n\n\nBeWaterSmartComponent\n\nBeWaterSmartComponent\n\n\n\nBeWaterSmartModule\n\nBeWaterSmartModule\n\nBeWaterSmartModule -->\n\nBeWaterSmartComponent->BeWaterSmartModule\n\n\n\n\n\nBeWaterSmartComponent \n\nBeWaterSmartComponent \n\nBeWaterSmartComponent  -->\n\nBeWaterSmartModule->BeWaterSmartComponent \n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/lib/be-water-smart.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Declarations\n                    \n                        \n                            BeWaterSmartComponent\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            BeWaterSmartComponent\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import {CommonModule} from \"@angular/common\";\nimport {NgModule} from \"@angular/core\";\nimport {FormsModule} from \"@angular/forms\";\nimport {TranslateModule} from \"@ngx-translate/core\";\nimport {WisdomModule} from \"common\";\n\nimport {BeWaterSmartComponent} from \"./be-water-smart.component\";\n\n\n\n@NgModule({\n  declarations: [\n    BeWaterSmartComponent\n  ],\n  imports: [\n    WisdomModule,\n    TranslateModule,\n    CommonModule,\n    FormsModule\n  ],\n  exports: [\n    BeWaterSmartComponent\n  ]\n})\nexport class BeWaterSmartModule { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/BeWaterSmartService.html":{"url":"injectables/BeWaterSmartService.html","title":"injectable - BeWaterSmartService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  BeWaterSmartService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/be-water-smart.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                ctx\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                addVirtualMeterWithId\n                            \n                            \n                                delModel\n                            \n                            \n                                delVirtualMeterById\n                            \n                            \n                                getAlgorithms\n                            \n                            \n                                getCreateForecast\n                            \n                            \n                                getDebugMessage\n                            \n                            \n                                getModels\n                            \n                            \n                                getPhysicalMeters\n                            \n                            \n                                getVirtualMeters\n                            \n                            \n                                putTrainModel\n                            \n                            \n                                sendRequest\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(http: HttpClient, router: Router)\n                    \n                \n                        \n                            \n                                Defined in src/lib/be-water-smart.service.ts:32\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        http\n                                                  \n                                                        \n                                                                    HttpClient\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        router\n                                                  \n                                                        \n                                                                    Router\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        addVirtualMeterWithId\n                        \n                    \n                \n            \n            \n                \naddVirtualMeterWithId(id: string, submeters: any)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/be-water-smart.service.ts:117\n                \n            \n\n\n            \n                \n                    posts a request to bws api in order to create a new virtual meter\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        name of the virtual meter\n\n                                    \n                                \n                                \n                                    submeters\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        all physical meters contained by the virtual meter\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        observable containing a success or http error msg\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        delModel\n                        \n                    \n                \n            \n            \n                \ndelModel(meter: string, alg: string)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/be-water-smart.service.ts:170\n                \n            \n\n\n            \n                \n                    delete request for the bws api.\nas requested by the api itself, you cant reference a model directly, but rather have to type in the\nvirtual meter and algorithm used and the api tracks down, which model it could be. Don't know why.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    meter\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        name of the virtual meter which got used to train the model\n\n                                    \n                                \n                                \n                                    alg\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        algorithm trained in the model\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        observable containing success or http error msg\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        delVirtualMeterById\n                        \n                    \n                \n            \n            \n                \ndelVirtualMeterById(input: string)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/be-water-smart.service.ts:128\n                \n            \n\n\n            \n                \n                    deletes virtual meter per id from the bws api\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    input\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the name of virtual meter to be deleted\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        observable containing success or http error msg\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getAlgorithms\n                        \n                    \n                \n            \n            \n                \ngetAlgorithms()\n                \n            \n\n\n            \n                \n                    Defined in src/lib/be-water-smart.service.ts:87\n                \n            \n\n\n            \n                \n                    requests all algorithms provided by bws api\n\n\n                    \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        observable containing list of all algorithms\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getCreateForecast\n                        \n                    \n                \n            \n            \n                \ngetCreateForecast(meterId: string, alg: string)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/be-water-smart.service.ts:105\n                \n            \n\n\n            \n                \n                    request the forecast data to create a graph from bws api\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    meterId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        id of the virtual meter being used\n\n                                    \n                                \n                                \n                                    alg\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        name of the algorithm being used\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Observable\n\n                    \n                    \n                        observable containing all measuring points for the next day\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getDebugMessage\n                        \n                    \n                \n            \n            \n                \ngetDebugMessage()\n                \n            \n\n\n            \n                \n                    Defined in src/lib/be-water-smart.service.ts:63\n                \n            \n\n\n            \n                \n                    uses send request method to test the reachability of bws api\n\n\n                    \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        success message or http error\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getModels\n                        \n                    \n                \n            \n            \n                \ngetModels()\n                \n            \n\n\n            \n                \n                    Defined in src/lib/be-water-smart.service.ts:95\n                \n            \n\n\n            \n                \n                    requests all trained models from bws api\n\n\n                    \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        observable containing list of all trained models\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getPhysicalMeters\n                        \n                    \n                \n            \n            \n                \ngetPhysicalMeters()\n                \n            \n\n\n            \n                \n                    Defined in src/lib/be-water-smart.service.ts:71\n                \n            \n\n\n            \n                \n                    requests physical meter information from bws api\n\n\n                    \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        observable containing list of all pm information\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getVirtualMeters\n                        \n                    \n                \n            \n            \n                \ngetVirtualMeters()\n                \n            \n\n\n            \n                \n                    Defined in src/lib/be-water-smart.service.ts:79\n                \n            \n\n\n            \n                \n                    requests virtual meter information from bws api\n\n\n                    \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        observable containing list of all vm information\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        putTrainModel\n                        \n                    \n                \n            \n            \n                \nputTrainModel(meter: VirtualMeter, input: Algorithm, comment?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/be-water-smart.service.ts:144\n                \n            \n\n\n            \n                \n                    train a new model via bws api using loading bar in http context,\nbecause of long execution time.\n-> every virtual meter can only hold a single model in combination with a\nalgorithm\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    meter\n                                    \n                                                VirtualMeter\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        virtual meter to be used as training data\n\n                                    \n                                \n                                \n                                    input\n                                    \n                                                Algorithm\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the algorithm to train\n\n                                    \n                                \n                                \n                                    comment\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        string to identify the trained model afterwards\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        observable containing all training data in a list\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        sendRequest\n                        \n                    \n                \n            \n            \n                \nsendRequest(method: \"get\" | \"post\" | \"put\" | \"delete\", url: string, ctx?: HttpContext, requestBody?: any)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/be-water-smart.service.ts:44\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n                    generalized request method for bws api\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    method\n                                    \n                                            \"get\" | \"post\" | \"put\" | \"delete\"\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        to use for request\n\n                                    \n                                \n                                \n                                    url\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        string as api endpoint\n\n                                    \n                                \n                                \n                                    ctx\n                                    \n                                            HttpContext\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        additional information about request\n\n                                    \n                                \n                                \n                                    requestBody\n                                    \n                                                any\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        bonus information in post and put requests\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        an Observable with the set interface\n\n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        ctx\n                        \n                    \n                \n            \n                \n                    \n                        Type :     HttpContext\n\n                    \n                \n                \n                    \n                        Default value : new HttpContext()\n    .set(USE_API_URL, true)\n    .set(USE_LOADER, false)\n    .set(USE_ERROR_HANDLER, 1)\n                    \n                \n                    \n                        \n                                Defined in src/lib/be-water-smart.service.ts:29\n                        \n                    \n\n            \n                \n                    http context for further information to the request.\n\n                \n            \n\n        \n    \n\n\n    \n\n\n    \n        import {HttpClient, HttpContext} from \"@angular/common/http\";\nimport {Injectable} from \"@angular/core\";\nimport {Router} from \"@angular/router\";\nimport {USE_API_URL, USE_LOADER, USE_ERROR_HANDLER} from \"common\";\nimport {Observable} from \"rxjs\";\n\nimport {\n  AllAlgorithms,\n  ForeCast,\n  VirtualMeter,\n  AllPhysicalMeters,\n  AllVirtualMeters,\n  AllModels\n} from \"./bws-interfaces\";\n\n/**\n * constant holding the api prefix to reach the bws api\n */\nconst API_PREFIX = \"bws\";\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class BeWaterSmartService {\n\n  /**\n   * http context for further information to the request.\n   */\n  ctx: HttpContext = new HttpContext()\n    .set(USE_API_URL, true)\n    .set(USE_LOADER, false)\n    .set(USE_ERROR_HANDLER, 1);\n\n  constructor(private http: HttpClient, private router: Router) { }\n\n  /**\n   * generalized request method for bws api\n   * @param method to use for request\n   * @param url string as api endpoint\n   * @param ctx additional information about request\n   * @param requestBody bonus information in post and put requests\n   * @returns an Observable with the set interface\n   */\n  sendRequest(method: 'get' | 'post' | 'put' | 'delete', url: string, ctx?: HttpContext, requestBody?: any) {\n\n    // FIXME continue here\n    let finalUrl = this.router.parseUrl(API_PREFIX + url);\n    let finalCtx = ctx || this.ctx;\n\n    let requestOptions: any = {\n      context: finalCtx,\n      responseType: 'json',\n      body: requestBody\n    };\n\n    return this.http.request(method, finalUrl.toString(), requestOptions) as Observable;\n  }\n\n  /**\n   * uses send request method to test the reachability of bws api\n   * @returns success message or http error\n   */\n  getDebugMessage() {\n    return this.sendRequest(\"get\", \"/debug\")\n  }\n\n  /**\n   * requests physical meter information from bws api\n   * @returns observable containing list of all pm information\n   */\n  getPhysicalMeters() {\n    return this.sendRequest(\"get\", \"/physical-meters\")\n  }\n\n  /**\n   * requests virtual meter information from bws api\n   * @returns observable containing list of all vm information\n   */\n  getVirtualMeters() {\n    return this.sendRequest(\"get\", \"/virtual-meters\")\n  }\n\n  /**\n   * requests all algorithms provided by bws api\n   * @returns observable containing list of all algorithms\n   */\n  getAlgorithms() {\n    return this.sendRequest(\"get\", \"/algorithms\");\n  }\n\n  /**\n   * requests all trained models from bws api\n   * @returns observable containing list of all trained models\n   */\n  getModels() {\n    return this.sendRequest(\"get\", \"/models\");\n  }\n\n  /**\n   * request the forecast data to create a graph from bws api\n   * @param meterId id of the virtual meter being used\n   * @param alg name of the algorithm being used\n   * @returns observable containing all measuring points for the next day\n   */\n  getCreateForecast(meterId: string, alg: string): Observable {\n    let url = \"/meters/\" + meterId + \"/forecast\" + \"?algorithm=\" + alg\n\n    return this.sendRequest(\"get\", url);\n  }\n\n  /**\n   * posts a request to bws api in order to create a new virtual meter\n   * @param id name of the virtual meter\n   * @param submeters all physical meters contained by the virtual meter\n   * @returns observable containing a success or http error msg\n   */\n  addVirtualMeterWithId(id: string, submeters: any) {\n    let url = \"/virtual-meters?name=\" + id;\n\n    return this.sendRequest(\"post\", url, this.ctx, submeters);\n  }\n\n  /**\n   * deletes virtual meter per id from the bws api\n   * @param input the name of virtual meter to be deleted\n   * @returns observable containing success or http error msg\n   */\n  delVirtualMeterById(input: string) {\n    let url = \"/virtual-meters/\" + input\n\n    return this.sendRequest(\"delete\", url);\n  }\n\n  /**\n   * train a new model via bws api using loading bar in http context,\n   * because of long execution time.\n   * -> every virtual meter can only hold a single model in combination with a\n   * algorithm\n   * @param meter virtual meter to be used as training data\n   * @param input the algorithm to train\n   * @param comment string to identify the trained model afterwards\n   * @returns observable containing all training data in a list\n   */\n  putTrainModel(meter: VirtualMeter, input: Algorithm, comment?: string) {\n    let virt = meter.id.toString();\n    let alg = input.name.toString();\n\n    let url = \"/meters/\" + virt + \"/models/\" + alg;\n\n    if (comment) {\n      url = url + \"?comment=\" + comment;\n    }\n\n    let ctx: HttpContext = new HttpContext()\n      .set(USE_API_URL, true)\n      .set(USE_LOADER, true)\n      .set(USE_ERROR_HANDLER, 1);\n\n    return this.sendRequest(\"put\", url, ctx);\n  }\n\n  /**\n   * delete request for the bws api.\n   * as requested by the api itself, you cant reference a model directly, but rather have to type in the \n   * virtual meter and algorithm used and the api tracks down, which model it could be. Don't know why.\n   * @param meter name of the virtual meter which got used to train the model\n   * @param alg algorithm trained in the model\n   * @returns observable containing success or http error msg\n   */\n  delModel(meter: string, alg: string) {\n\n    let url = \"/models/\" + meter + \":MLModel:\" + alg;\n\n    return this.sendRequest(\"delete\", url);\n  }\n\n\n}\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ForeCast.html":{"url":"interfaces/ForeCast.html","title":"interface - ForeCast","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ForeCast\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/bws-interfaces.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            covariateValues\n                                        \n                                \n                                \n                                        \n                                            datePredicted\n                                        \n                                \n                                \n                                        \n                                            histRefValues\n                                        \n                                \n                                \n                                        \n                                            id\n                                        \n                                \n                                \n                                        \n                                            numValue\n                                        \n                                \n                                \n                                        \n                                            refDevice\n                                        \n                                \n                                \n                                        \n                                            type\n                                        \n                                \n                                \n                                        \n                                            unit\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        covariateValues\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        covariateValues:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        datePredicted\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        datePredicted:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        histRefValues\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        histRefValues:     Record\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Record\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        numValue\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        numValue:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        refDevice\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        refDevice:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        type\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        type:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        unit\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        unit:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface PhysicalMeter {\n    address: {\n        addressCountry: string;\n        addressLocality: string;\n        streetAddress: string;\n    };\n    category: string;\n    date: string;\n    description: string;\n    id: string;\n    type: string;\n}\n\nexport interface AllPhysicalMeters {\n    meters: PhysicalMeter[];\n}\n\nexport interface VirtualMeter {\n    dateCreated: string;\n    description: string;\n    id: string;\n    submeterIds: string[];\n    supermeterIds: string[];\n}\n\nexport interface AllVirtualMeters {\n    virtualMeters: VirtualMeter[];\n}\n\nexport interface Algorithm {\n    description: string;\n    estimatedTrainingTime: number | null;\n    name: string;\n}\n\nexport interface AllAlgorithms {\n    algorithms: Algorithm[];\n}\n\nexport interface MLModel {\n    algorithm: string;\n    comment: string;\n    dateCreated: string;\n    dateModified: string;\n    description: string;\n    evaluation: {\n        actualTestConsumption: number[],\n        metrics: {\n            mape: number,\n            mse: number,\n            rmse: number,\n            smape: number\n        };\n        predictedTestConsumption: number[];\n        testCovariates: {\n            day: number[],\n            is_holiday: number[],\n            is_weekend: number[],\n            month: number[],\n            //TODO check if this is correct precipitation_mm\n            precipitation_mm: number[],\n            year: number[]\n        };\n        testTimestamps: number[]\n    };\n    hyperparameters: {\n        country_holidays: string,\n        daily_seasonality: number,\n        weekly_seasonality: number,\n        yearly_seasonality: number\n    };\n    id: string;\n    inputAttributes: [\n        waterConsumption: string,\n        day: string,\n        month: string,\n        year: string,\n        is_weekend: string,\n        is_holiday: string,\n        // precipitation (mm) original\n        precipitation_mm: string\n    ];\n    isDefault: boolean;\n    isModelValid: boolean;\n    mlFramework: string;\n    refMeter: string;\n}\n\nexport interface AllModels {\n    MLModels: MLModel[];\n}\n\nexport interface ForeCast {\n    covariateValues: {\n        day: number;\n        is_holiday: number;\n        is_weekend: number;\n        month: number;\n        \"precipitation (mm)\": number;\n        year: number;\n    };\n    datePredicted: string;\n    histRefValues: Record; // This represents an empty object {}\n    id: string;\n    numValue: number;\n    refDevice: string;\n    type: string;\n    unit: string;\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/MLModel.html":{"url":"interfaces/MLModel.html","title":"interface - MLModel","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  MLModel\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/bws-interfaces.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            algorithm\n                                        \n                                \n                                \n                                        \n                                            comment\n                                        \n                                \n                                \n                                        \n                                            dateCreated\n                                        \n                                \n                                \n                                        \n                                            dateModified\n                                        \n                                \n                                \n                                        \n                                            description\n                                        \n                                \n                                \n                                        \n                                            evaluation\n                                        \n                                \n                                \n                                        \n                                            hyperparameters\n                                        \n                                \n                                \n                                        \n                                            id\n                                        \n                                \n                                \n                                        \n                                            inputAttributes\n                                        \n                                \n                                \n                                        \n                                            isDefault\n                                        \n                                \n                                \n                                        \n                                            isModelValid\n                                        \n                                \n                                \n                                        \n                                            mlFramework\n                                        \n                                \n                                \n                                        \n                                            refMeter\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        algorithm\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        algorithm:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        comment\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        comment:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        dateCreated\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        dateCreated:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        dateModified\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        dateModified:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        description\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        description:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        evaluation\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        evaluation:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        hyperparameters\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        hyperparameters:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        inputAttributes\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        inputAttributes:     [, , , , , , ]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     [, , , , , , ]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        isDefault\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        isDefault:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        isModelValid\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        isModelValid:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        mlFramework\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        mlFramework:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        refMeter\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        refMeter:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface PhysicalMeter {\n    address: {\n        addressCountry: string;\n        addressLocality: string;\n        streetAddress: string;\n    };\n    category: string;\n    date: string;\n    description: string;\n    id: string;\n    type: string;\n}\n\nexport interface AllPhysicalMeters {\n    meters: PhysicalMeter[];\n}\n\nexport interface VirtualMeter {\n    dateCreated: string;\n    description: string;\n    id: string;\n    submeterIds: string[];\n    supermeterIds: string[];\n}\n\nexport interface AllVirtualMeters {\n    virtualMeters: VirtualMeter[];\n}\n\nexport interface Algorithm {\n    description: string;\n    estimatedTrainingTime: number | null;\n    name: string;\n}\n\nexport interface AllAlgorithms {\n    algorithms: Algorithm[];\n}\n\nexport interface MLModel {\n    algorithm: string;\n    comment: string;\n    dateCreated: string;\n    dateModified: string;\n    description: string;\n    evaluation: {\n        actualTestConsumption: number[],\n        metrics: {\n            mape: number,\n            mse: number,\n            rmse: number,\n            smape: number\n        };\n        predictedTestConsumption: number[];\n        testCovariates: {\n            day: number[],\n            is_holiday: number[],\n            is_weekend: number[],\n            month: number[],\n            //TODO check if this is correct precipitation_mm\n            precipitation_mm: number[],\n            year: number[]\n        };\n        testTimestamps: number[]\n    };\n    hyperparameters: {\n        country_holidays: string,\n        daily_seasonality: number,\n        weekly_seasonality: number,\n        yearly_seasonality: number\n    };\n    id: string;\n    inputAttributes: [\n        waterConsumption: string,\n        day: string,\n        month: string,\n        year: string,\n        is_weekend: string,\n        is_holiday: string,\n        // precipitation (mm) original\n        precipitation_mm: string\n    ];\n    isDefault: boolean;\n    isModelValid: boolean;\n    mlFramework: string;\n    refMeter: string;\n}\n\nexport interface AllModels {\n    MLModels: MLModel[];\n}\n\nexport interface ForeCast {\n    covariateValues: {\n        day: number;\n        is_holiday: number;\n        is_weekend: number;\n        month: number;\n        \"precipitation (mm)\": number;\n        year: number;\n    };\n    datePredicted: string;\n    histRefValues: Record; // This represents an empty object {}\n    id: string;\n    numValue: number;\n    refDevice: string;\n    type: string;\n    unit: string;\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/PhysicalMeter.html":{"url":"interfaces/PhysicalMeter.html","title":"interface - PhysicalMeter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  PhysicalMeter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/bws-interfaces.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            address\n                                        \n                                \n                                \n                                        \n                                            category\n                                        \n                                \n                                \n                                        \n                                            date\n                                        \n                                \n                                \n                                        \n                                            description\n                                        \n                                \n                                \n                                        \n                                            id\n                                        \n                                \n                                \n                                        \n                                            type\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        address\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        address:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        category\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        category:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        date\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        date:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        description\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        description:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        type\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        type:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface PhysicalMeter {\n    address: {\n        addressCountry: string;\n        addressLocality: string;\n        streetAddress: string;\n    };\n    category: string;\n    date: string;\n    description: string;\n    id: string;\n    type: string;\n}\n\nexport interface AllPhysicalMeters {\n    meters: PhysicalMeter[];\n}\n\nexport interface VirtualMeter {\n    dateCreated: string;\n    description: string;\n    id: string;\n    submeterIds: string[];\n    supermeterIds: string[];\n}\n\nexport interface AllVirtualMeters {\n    virtualMeters: VirtualMeter[];\n}\n\nexport interface Algorithm {\n    description: string;\n    estimatedTrainingTime: number | null;\n    name: string;\n}\n\nexport interface AllAlgorithms {\n    algorithms: Algorithm[];\n}\n\nexport interface MLModel {\n    algorithm: string;\n    comment: string;\n    dateCreated: string;\n    dateModified: string;\n    description: string;\n    evaluation: {\n        actualTestConsumption: number[],\n        metrics: {\n            mape: number,\n            mse: number,\n            rmse: number,\n            smape: number\n        };\n        predictedTestConsumption: number[];\n        testCovariates: {\n            day: number[],\n            is_holiday: number[],\n            is_weekend: number[],\n            month: number[],\n            //TODO check if this is correct precipitation_mm\n            precipitation_mm: number[],\n            year: number[]\n        };\n        testTimestamps: number[]\n    };\n    hyperparameters: {\n        country_holidays: string,\n        daily_seasonality: number,\n        weekly_seasonality: number,\n        yearly_seasonality: number\n    };\n    id: string;\n    inputAttributes: [\n        waterConsumption: string,\n        day: string,\n        month: string,\n        year: string,\n        is_weekend: string,\n        is_holiday: string,\n        // precipitation (mm) original\n        precipitation_mm: string\n    ];\n    isDefault: boolean;\n    isModelValid: boolean;\n    mlFramework: string;\n    refMeter: string;\n}\n\nexport interface AllModels {\n    MLModels: MLModel[];\n}\n\nexport interface ForeCast {\n    covariateValues: {\n        day: number;\n        is_holiday: number;\n        is_weekend: number;\n        month: number;\n        \"precipitation (mm)\": number;\n        year: number;\n    };\n    datePredicted: string;\n    histRefValues: Record; // This represents an empty object {}\n    id: string;\n    numValue: number;\n    refDevice: string;\n    type: string;\n    unit: string;\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/VirtualMeter.html":{"url":"interfaces/VirtualMeter.html","title":"interface - VirtualMeter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  VirtualMeter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/bws-interfaces.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            dateCreated\n                                        \n                                \n                                \n                                        \n                                            description\n                                        \n                                \n                                \n                                        \n                                            id\n                                        \n                                \n                                \n                                        \n                                            submeterIds\n                                        \n                                \n                                \n                                        \n                                            supermeterIds\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        dateCreated\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        dateCreated:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        description\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        description:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        submeterIds\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        submeterIds:     string[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        supermeterIds\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        supermeterIds:     string[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface PhysicalMeter {\n    address: {\n        addressCountry: string;\n        addressLocality: string;\n        streetAddress: string;\n    };\n    category: string;\n    date: string;\n    description: string;\n    id: string;\n    type: string;\n}\n\nexport interface AllPhysicalMeters {\n    meters: PhysicalMeter[];\n}\n\nexport interface VirtualMeter {\n    dateCreated: string;\n    description: string;\n    id: string;\n    submeterIds: string[];\n    supermeterIds: string[];\n}\n\nexport interface AllVirtualMeters {\n    virtualMeters: VirtualMeter[];\n}\n\nexport interface Algorithm {\n    description: string;\n    estimatedTrainingTime: number | null;\n    name: string;\n}\n\nexport interface AllAlgorithms {\n    algorithms: Algorithm[];\n}\n\nexport interface MLModel {\n    algorithm: string;\n    comment: string;\n    dateCreated: string;\n    dateModified: string;\n    description: string;\n    evaluation: {\n        actualTestConsumption: number[],\n        metrics: {\n            mape: number,\n            mse: number,\n            rmse: number,\n            smape: number\n        };\n        predictedTestConsumption: number[];\n        testCovariates: {\n            day: number[],\n            is_holiday: number[],\n            is_weekend: number[],\n            month: number[],\n            //TODO check if this is correct precipitation_mm\n            precipitation_mm: number[],\n            year: number[]\n        };\n        testTimestamps: number[]\n    };\n    hyperparameters: {\n        country_holidays: string,\n        daily_seasonality: number,\n        weekly_seasonality: number,\n        yearly_seasonality: number\n    };\n    id: string;\n    inputAttributes: [\n        waterConsumption: string,\n        day: string,\n        month: string,\n        year: string,\n        is_weekend: string,\n        is_holiday: string,\n        // precipitation (mm) original\n        precipitation_mm: string\n    ];\n    isDefault: boolean;\n    isModelValid: boolean;\n    mlFramework: string;\n    refMeter: string;\n}\n\nexport interface AllModels {\n    MLModels: MLModel[];\n}\n\nexport interface ForeCast {\n    covariateValues: {\n        day: number;\n        is_holiday: number;\n        is_weekend: number;\n        month: number;\n        \"precipitation (mm)\": number;\n        year: number;\n    };\n    datePredicted: string;\n    histRefValues: Record; // This represents an empty object {}\n    id: string;\n    numValue: number;\n    refDevice: string;\n    type: string;\n    unit: string;\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/lib/be-water-smart.component.ts\n            \n            component\n            BeWaterSmartComponent\n            \n                80 %\n                (38/47)\n            \n        \n        \n            \n                \n                src/lib/be-water-smart.service.ts\n            \n            injectable\n            BeWaterSmartService\n            \n                85 %\n                (12/14)\n            \n        \n        \n            \n                \n                src/lib/be-water-smart.service.ts\n            \n            variable\n            API_PREFIX\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/lib/bws-interfaces.ts\n            \n            interface\n            Algorithm\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/lib/bws-interfaces.ts\n            \n            interface\n            AllAlgorithms\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/lib/bws-interfaces.ts\n            \n            interface\n            AllModels\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/lib/bws-interfaces.ts\n            \n            interface\n            AllPhysicalMeters\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/lib/bws-interfaces.ts\n            \n            interface\n            AllVirtualMeters\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/lib/bws-interfaces.ts\n            \n            interface\n            ForeCast\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/lib/bws-interfaces.ts\n            \n            interface\n            MLModel\n            \n                0 %\n                (0/14)\n            \n        \n        \n            \n                \n                src/lib/bws-interfaces.ts\n            \n            interface\n            PhysicalMeter\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/lib/bws-interfaces.ts\n            \n            interface\n            VirtualMeter\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/public-api.ts\n            \n            variable\n            wisdomInterface\n            \n                0 %\n                (0/1)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            tslib : ^2.3.0\n    \n\n\n    \n    \n        Peer dependencies\n    \n    \n        \n            @angular/common : ^16.1.0\n        \n            @angular/core : ^16.1.0\n    \n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nBeWaterSmart\nThis library was generated with Angular CLI version 16.1.0.\nCode scaffolding\nRun ng generate component component-name --project be-water-smart to generate a new component. You can also use ng generate directive|pipe|service|class|guard|interface|enum|module --project be-water-smart.\n\nNote: Don't forget to add --project be-water-smart or else it will be added to the default project in your angular.json file. \n\nBuild\nRun ng build be-water-smart to build the project. The build artifacts will be stored in the dist/ directory.\nPublishing\nAfter building your library with ng build be-water-smart, go to the dist folder cd dist/be-water-smart and run npm publish.\nRunning unit tests\nRun ng test be-water-smart to execute the unit tests via Karma.\nFurther help\nTo get more help on the Angular CLI use ng help or go check out the Angular CLI Overview and Command Reference page.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        BeWaterSmartModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_BeWaterSmartModule\n\n\n\ncluster_BeWaterSmartModule_declarations\n\n\n\ncluster_BeWaterSmartModule_exports\n\n\n\n\nBeWaterSmartComponent\n\nBeWaterSmartComponent\n\n\n\nBeWaterSmartModule\n\nBeWaterSmartModule\n\nBeWaterSmartModule -->\n\nBeWaterSmartComponent->BeWaterSmartModule\n\n\n\n\n\nBeWaterSmartComponent \n\nBeWaterSmartComponent \n\nBeWaterSmartComponent  -->\n\nBeWaterSmartModule->BeWaterSmartComponent \n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        1 Module\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    1 Component\n                \n            \n        \n        \n            \n                \n                    \n                    1 Injectable\n                \n            \n        \n        \n            \n                \n                    \n                    9 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            API_PREFIX   (src/.../be-water-smart.service.ts)\n                        \n                        \n                            wisdomInterface   (src/.../public-api.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/lib/be-water-smart.service.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        API_PREFIX\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : \"bws\"\n                    \n                \n\n            \n                \n                    constant holding the api prefix to reach the bws api\n\n                \n            \n\n        \n    \n\n    src/public-api.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        wisdomInterface\n                        \n                    \n                \n            \n                \n                    \n                        Type :     WisdomInterface\n\n                    \n                \n                \n                    \n                        Default value : {\n  route: {\n    path: 'be-water-smart',\n    component: BeWaterSmartComponent,\n  },\n  scopes: [],\n  translations: {\n    de_DE: {},\n    en_US: {},\n  },\n}\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
